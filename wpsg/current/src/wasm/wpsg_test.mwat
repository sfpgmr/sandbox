(module
  (export "setRate" (func $set_rate))
  (export "init" (func $init))
  (export "reset" (func $reset))
  (export "doEnvelope" (func $do_envelope))
  (import "env" "memory" (memory $memory 0))

{@struct EnvParam
  i32 flag;
  f32 level;
  f32 attack_time;
  f32 decay_time;
  f32 sustain_level;
  f32 release_time;

  f32 attack_delta;
  f32 decay_delta;
  f32 release_delta;
}

{@struct EnvWork
  i32 flag;
  i32 step;
  f32 counter;
  f32 value;
}


{@map
  EnvParam env;
  EnvWork env_work;
  f32 sample_rate;
  f32 delta;
  i32 offset_start;
}

  (func $set_rate (param $r f32) 
    (f32.store (&sample_rate;) 
      (local.get $r)
    )
    (f32.store (&delta;)
      (f32.div
        (f32.const 1)
        (local.get $r)
      )
    )
  )
 
  (func $init 
    (call $reset)
  )

  (func $reset 
  )

  (func $update 
  )

  (;; 
   ####################################
    エンベロープジェネレータ 
   ####################################
  ;;)
  ;; ## 初期化 ##
  (func $initEnvelope 
    (param $env_param_offset i32) 
    (param $sample_rate f32)

    ;; attack ;;;;;;;
    (f32.store 
      (i32.add (&EnvParam.attack_delta;) (local.get $env_param_offset))
      (f32.div (f32.const 1)
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.attack_time;) (local.get $env_param_offset)))
        )
      )
    )
    ;; decay ;;;;;;;;
    (f32.store 
      (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset))
      (f32.div 
        (f32.sub 
          (f32.const 1) 
          (f32.load (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset)))
        )
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.decay_time;) (local.get $env_param_offset)))
        )
      )
    )
    ;; release ;;;;;;
    (f32.store 
      (i32.add (&EnvParam.release_delta;) (local.get $env_param_offset))
      (f32.div (f32.load (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset)))
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.release_time;) (local.get $env_param_offset)))
        )
      )
    )
  )

  (func $initEnvWork (param $env_work_offset i32)
    ;; counter 
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; step
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; flag 
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.const 0)
    )

  )

  (func $do_envelope 
    (param $env_param_offset i32) 
    (param $env_work_offset i32)
    (result f32)
    (local $counter f32)
    (local $step i32)
    (local $value f32)

    (local.set $counter 
      (f32.load 
        (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      )
    )

    (local.set $step
      (i32.load 
        (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      )
    )

    (local.set $value 
      (f32.load 
        (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      )
    )

    (block $main
      (block $do_release
        (block $do_sustain
          (block $do_decay
            (block $do_attack
              (br_table $do_attack $do_decay $do_sustain $do_release 
                (local.get $step)
              )
            )
            ;; ### attack ###

            (if (f32.ge            
                  (local.tee $counter
                    (f32.add 
                      (f32.load (&delta;))
                      (local.get $counter)
                    )
                  )
                  (f32.load (f32.add(&EnvParam.attack_time;) (local.get $env_param_offset)))
                 )
              (then
                (i32.store
                  (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                  (i32.const 1)
                )

                (f32.store
                  (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
                  (f32.const 0)
                )
                (f32.store (f32.add (&EnvWork.value;) (local.get $env_work_offset))
                  (local.tee $value 
                    (f32.const 1)
                  ) 
                )
                (return (local.get $value))
              )
              (else
                (f32.store f32.add((&EnvWork.value;) (local.get $env_work_offset))
                  (local.tee $value
                    (f32.add (local.get $value)
                      (f32.load (f32.add(&EnvParam.attack_delta;) (local.get $env_param_offset)))
                    )
                  )
                )
                (return (local.get $value))
              )
            )
          )
          ;; ### decay ###
            (if (f32.ge            
                  (local.tee $counter
                    (f32.add 
                      (f32.load (&delta;))
                      (local.get $counter)
                    )
                  )
                  (f32.load (f32.add(&EnvParam.decay_time;) (local.get $env_param_offset)))
                 )
              (then
                (i32.store
                  (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                  (i32.const 2)
                )

                (f32.store
                  (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
                  (f32.const 0)
                )
                (f32.store (f32.add (&EnvWork.value;) (local.get $env_work_offset))
                  (local.tee $value 
                    (f32.load 
                       (f32.add (&EnvParam.sustain_level;) (local.get $env_param_offset))
                    )
                  ) 
                )
                (return (local.get $value))
              )
              (else
                (f32.store f32.add((&EnvWork.value;) (local.get $env_work_offset))
                  (local.tee $value
                    (f32.sub (local.get $value)
                      (f32.load (f32.add(&EnvParam.decay_delta;) (local.get $env_param_offset)))
                    )
                  )
                )
                (return (local.get $value))
              )
            )
        )
        ;; ### sustain ###
      )
      ;; ### release ###
    )
    (return (f32.const 0))
  )
)
