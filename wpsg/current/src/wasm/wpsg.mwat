(module
  (import "env" "memory" (memory $memory 1 10 shared))
  (export "setRate" (func $set_rate))
  (export "initEnvelope" (func $initEnvelope))
  (export "initEnvelopeWork" (func $initEnvelopeWork))
  (export "keyOnEnvelope" (func $keyOnEnvelope))
  (export "keyOffEnvelope" (func $KeyOffEnvelope))
  (export "doEnvelope" (func $doEnvelope))
  (export "initMemory" (func $initMemory))
  (export "allocateMemory" (func $allocateMemory))
  (export "freeMemory" (func $freeMemory))

  (export "initWaveTableOscillator" (func $initWaveTableOscillator))
  (export "initWaveTable" (func $initWaveTable))
  (export "allocateWaveTable" (func $allocateWaveTable))
  (export "initWaveTableWork" (func $initWaveTableWork))
  (export "readWaveTable" (func $readWaveTable))

  (type $oscillatorFunc (func (param i32) (result i32)))
  (table 1 anyfunc )

  (elm (i32.const 0) $readWaveTable)

(;;
###############################################################

Envelope Generator
    decay
   /\   sustain
  /  \_________   
 /             |\
/              | \
attack        release
|              |
keyon          keyoff

Envelope .... エンベロープのパラメータ格納用
EnvelopeWork .... エンベロープのインスタンス制御用ワーク

###############################################################
;;)

{@struct Envelope
  ;; bit 0:
  ;; 1 ... enable
  ;; 0 ... disable
  i32 flag;
  f32 level;
  f32 attack_time;
  f32 decay_time;
  f32 sustain_level;
  f32 release_time;

  f32 attack_delta;
  f32 decay_delta;
  f32 release_delta;
}

{@struct EnvelopeWork
  i32 env_param_offset;
  i32 flag;
  i32 step;
  f32 counter;
  f32 value;
}

;; -----------------------
;; オシレータ抽象化構造体
;; -----------------------

;; パラメータ
{@struct Oscillator
  ;; フラグ
  ;; bit 0-4 : タイプ
  ;;  0000 ... WaveTable
  ;;  0001 ... WaveSample
  i32 flag;
}

;; ワークエリア
{@struct OscillatorWork
  i32 param_offset;
  i32 call_index;
  f32 pitch;
  f32 sample_rate;
  f32 value;
}


;; --------------------------
;; 波形メモリオシレータ
;; いわゆるwsgとかsccみたいなの
;; --------------------------

;; 波形メモリ・パラメータ
{@struct WaveTable 
  Oscillator base;
  ;; サンプル・サイズは２のべき乗 (min:2)
  ;; 1周期分
  i32 size;
  i32 wave_size_mask;
  ;; Waveデータ開始位置
  f32 wave_data_start;
}

;; 波形メモリ・ワークエリア
{@struct WaveTableWork 
  OscillatorWork base;
  i32 wave_table_offset;
  f32 base_frequency;
  f32 table_sample_rate;
  i32 counter;
  f32 delta;
}

;; --------------------------
;; 波形メモリオシレータ（サンプラタイプ）  
;; まだ手をつけていない
;; --------------------------

{@struct WaveSample

  ;; サンプル・サイズは任意
  i32 size;
  ;; フラグ
  ;; bit 0: 1 ... ループあり 0... ループなし
  i32 flag;
  ;; ループ開始オフセット
  i32 loop_start;
  ;; ループ終了オフセット
  i32 loop_end;
  ;; Waveデータ開始
  f32 wave_data_start;
  ;; サンプルのサンプルレート
  f32 sample_rate;
}

{@struct WaveFormWork
  f32 counter;
  f32 delta;
  f32 value;
}

;; --------------------------
;; フィルター
;; まだ実装できていない
;; --------------------------

{@struct FilterParam
  i32 flag;
  i32 filter_type;
  f32 level;
  f32 freq;
  f32 resonance;
  Envelope envelope;
  f32 counter;
}

{@struct FilterWork
  i32 flag;
}


;; -----------------------
;; 音色
;; -----------------------

;; 音色・パラメータ
{@struct Timbre
  ;; # オシレータ
  i32 oscillator;
  ;; ピッチ・エンベロープ
  Envelope pitch_envelope;
  ;; ピッチ・LFO
  i32 pitch_lfo;
  ;; 音量エンベロープ
  Envelope amplitude_envelope;
  ;; 音量LFO
  i32 amplitude_lfo;
}

;; 音色ワークエリア
{@struct TimbreWork
  ;; フラグ
  ;; bit 0
  ;;  0 ... keyoff
  ;;  1 ... keyon
  i32 flag;
  f32 pitch;
  ;; オシレータワークエリアへのオフセット
  i32 oscillator_work_offset;
  ;; ピッチ・エンベロープ
  EnvelopeWork pitch_envelope;
  ;; ピッチLFO
  i32 pitch_lfo_offset;

  ;; 音量エンベロープ
  EnvelopeWork amplitude_envelope;
  ;; 音量LFO
  i32 amplitude_lfo_offset;
  ;;  FilterWork filter;
  ;; 出力レベル
  f32 output_level;
  f32 value;
}

;; --------------------------------
;; メモリマップ 
;; --------------------------------

{@map
  ;; アロケート済みメモリのオフセット格納用
  i32 alloc_mem_offset;
  ;; オーディオ・インターフェースのサンプルレート
  f32 sample_rate;
  ;; サンプルレートの逆数 1 / sample_rate
  f32 delta;
  ;; 波形テーブル(32個分)のオフセットアドレスを格納
  i32 wave_table[32];
  ;; 音色
  Timbre timbre;
  ;; 音色ワーク
  TimbreWork timbre_work;
  ;; メモリの先頭位置
  i32 mem_start;
}


;; -----------------------------------
;; 簡易メモリアロケータ 
;; 取ったら取りっぱなしのメモリアロケータ
;; ------------------------------------

  ;; メモリ初期化
  (func $initMemory
    (i32.store
      (&alloc_mem_offset;)
      (&mem_start;)  
    )
  )

  ;; メモリのアロケート
  (func $allocateMemory
    (param $size i32)
    (result i32)
    (local $mem_offset i32)
    (local $mem_page i32)

    ;; 8 byte 境界にそろえる
    (local.set $size
      (i32.and
        (i32.add
          (local.get $size)
          (i32.const 0x7)
        )
        (i32.const 0xffff_fff8)
      )    
    )

    (if
      (i32.gt_u
        (local.tee $mem_page
          (i32.shr_u
            (local.tee $mem_offset
              (i32.add (local.get $size) (&alloc_mem_offset;))
            )
            (i32.const 16)
          )
        )
        (memory.size)
      )

      (then
        ;;メモリが足りない場合、必要な分だけページを拡張する
        (drop
          (memory.grow
            (i32.sub
              (local.get $mem_page)
              (i32.const 1)
            )
          )
        )
      )
    )

    (i32.store
      (&alloc_mem_offset;)
      (local.get $mem_offset)
    )
    (local.get $mem_offset)
  )

  ;; 指定オフセットからのメモリを開放する
  (func $freeMemory
    (param $offset i32)
    (i32.store
      (&alloc_mem_offset;)
      (local.get $offset)
    )
  )

  (func $set_rate (param $r f32) 
    (f32.store (&sample_rate;) 
      (local.get $r)
    )
    (f32.store (&delta;)
      (f32.div
        (f32.const 1)
        (local.get $r)
      )
    )
  )

;; -----------------------------------
;; オシレータ
;; -----------------------------------

  ;; # オシレータの初期化
  (func $initOscillator 
    (param $oscillator_offset i32)
    (param $oscillator_type i32)
    (param $param_ i32)

    (i32.store 
      (i32.add
        (&Oscillator.flag;)
        (local.get $oscillator_type)
      )
      (local.get $oscillator_type)
    )

    (block $create_block
      (block $wave_sample
        (block $wave_table
          (br_table $wave_table $wave_sample 
            (local.get $oscillator_type)
          )
        )
        ;; ## wave table ;;
        (call $initWaveTableOscillator
          (local.get $oscillator_offset)
          (i32.load
            (i32.add
              (i32.shl
                (local.get $param_)
                (i32.const 2)
              )
              (&wave_table;)
            )
          )
        )
        (return)
      )
      ;; wave sampleの場合
    )
  )

  (func $initOscillatorWork
    (param $oscillator_offset i32)
    (param $oscillator_work_offset i32)
    (local $oscillator_type i32)
    (local $offset i32)
 
    ;; オシレータ・タイプ
    (i32.store 
      (i32.add
        (&OscillatorWork.call_index;)
        (local.get $oscillator_offset)
      )
      (local.tee $oscillator_type
        (i32.and
          (i32.load
            (i32.add
              (&Oscillator.flag;)
              (local.get $oscillator_offset)
            )
          )
          (i32.const 0xf)
        )
      )
    )


    (block $create_block
      (block $wave_sample
        (block $wave_table
          (br_table $wave_table $wave_sample
            (local.get $oscillator_type)
          )
        )
        ;; # wave table
        (i32.store
          (i32.add
            (&OscillatorWork.work_offset;)
            (local.get $oscillator_work_offset)
          )
          (local.tee $offset
            (call $allocateMemory
              (#WaveTableWork;)
            )
          )
        )
        (call $initWaveTableWork
          (local.get $offset)
          (i32.load
            (i32.add
              (&Oscillator.offset;)
              (local.get $oscillator_offset)
            )
          )
          (f32.const 440)
        )
      )
      ;; # wave sample
    )
  )


;; -----------------------------------
;;  Wave Table
;; -----------------------------------

  ;; # wave tableの初期化 #
  (func $initWaveTable
    ;; メモリオフセット
    (param $wave_table_offset i32)
    ;; サイズ（２のべき乗単位で指定）
    (param $size i32)

    (i32.store 
      (&WaveTable.base.flag;)
      (i32.const 0)
    )
    
    (i32.store
      (i32.add
        (&WaveTable.size;)
        (local.get $wave_table_offset)
      )
      (local.get $size)
    )

    (i32.store
      (i32.add
        (&WaveTable.wave_size_mask;)
        (local.get $wave_table_offset)
      )
      (i32.sub
        (local.get $size)
        (i32.const 1)
      )
    )
  )

  ;; # wave table用メモリのアロケートと初期化 #
  (func $allocateWaveTable
    (param $data_size i32)
    (result i32)
    (local $offset i32)
    (call $initWaveTable
      (local.tee $offset
        (call $allocateMemory
          (i32.add
            (local.get $data_size)
            (#WaveTable - 4;)
          )    
        )
      )
      (local.get $data_size)
    )
    (local.get $offset)
  )

  ;; # wave table workの初期化 #
  (func $initWaveTableWork
    (param $wave_table_work_offset i32)
    (param $wave_table_offset i32)
    (param $base_frequency f32)
    
    (i32.store
      (i32.add 
        (&WaveTableWork.wave_table_offset;)
        (local.get $wave_table_work_offset)
      )
      (local.get $wave_table_offset)
    )
 
    (f32.store 
      (i32.add
        (&WaveTableWork.base.sample_rate;)
        (local.get $wave_table_work_offset)
      )
      (f32.load (&sample_rate;))
    )

    (f32.store 
      (i32.add
        (&WaveTableWork.base_frequency;)
        (local.get $wave_table_work_offset)
      )
      (local.get $base_frequency)
    )

    (f32.store 
      (i32.add
        (&WaveTableWork.table_sample_rate;)
        (local.get $wave_table_work_offset)
      )
      (f32.mul
        (local.get $base_frequency)
        (f32.convert_i32_s
          (i32.load
            (i32.add
              (&WaveTable.size;)
              (local.get $wave_table_offset)
            )
          )
        )
      )
    )

    (i32.store
      (i32.add
        (&WaveTableWork.counter;)
        (local.get $wave_table_work_offset)
      )
      (i32.const 0)
    )

    ;;pitch
    (f32.store
      (i32.add
        (&WaveTableWork.pitch;)
        (local.get $wave_table_work_offset)
      )
      (f32.const 1)
    )

    (f32.store
      (i32.add
        (&WaveTableWork.delta;)
        (local.get $wave_table_work_offset)
      )
      (f32.load
        (i32.add
          (&WaveTableWork.base.sample_rate;)
          (local.get $wave_table_work_offset)
        )
      )
    )

    (f32.store
      (i32.add
        (&WaveTableWork.base.value;)
        (local.get $wave_table_work_offset)
      )
      (f32.const 0)
    )

    (i32.store
      (&WaveTableWork.base.param_offset;)
      (local.get $offset)
    )

    (i32.store
      (&WaveTable.base.call_index;)
      (i32.const 0)
    )
  )

  ;; # wave data の読み出し #
  (func $readWaveTable
    (param $wave_table_work_offset i32)
    (result f32)
    (local $wave_table_offset i32)
    (local $counter i32)
    (local $value f32)
    (local $delta f32)

    (if 
      (f32.le
        (local.tee $delta
          (f32.sub 
            (local.tee $delta
              (f32.load
                (i32.add 
                  (&WaveTableWork.delta;)
                  (local.get $wave_table_work_offset)
                )
              )
            )
            (f32.load
              (i32.add
                (&WaveTableWork.table_sample_rate;)
                (local.get $wave_table_work_offset)
              )
            )
          )
        )
        (f32.const 0)
      )

      (then
        (local.set $wave_table_offset
          (i32.load
            (i32.add 
              (&WaveTableWork.wave_table_offset;)
              (local.get $wave_table_work_offset)
            )
          )
        )
        
        ;; delta を進め、波形データを$valueにセットする
        (f32.store 
          (i32.add
            (&WaveTableWork.base.value;)
            (local.get $wave_table_work_offset)
          )
          (local.tee $value
            (f32.load
              (i32.add 
                (i32.shl 
                  (local.tee $counter
                    (i32.and
                      (i32.add
                        (i32.load 
                          (i32.add
                            (&WaveTableWork.counter;)
                            (local.get $wave_table_work_offset)
                          )
                        )
                        (i32.const 1)
                      )
                      (i32.load 
                        (i32.add 
                          (&WaveTable.wave_size_mask;)
                          (local.get $wave_table_offset)
                        )
                      )
                    )
                  )
                  (i32.const 2)
                )
                (i32.add 
                  (&WaveTable.wave_data_start;)
                  (local.get $wave_table_offset)
                )
              )
            )
          )
        )

        (i32.store 
          (i32.add
            (&WaveTableWork.counter;)
            (local.get $wave_table_work_offset)
          )
          (local.get $counter)
        )

        ;; deltaをリセットする

        ;; table_sample_rateの更新
        (f32.store
          (i32.add
            (&WaveTableWork.table_sample_rate;)
            (local.get $wave_table_work_offset)
          )
          (f32.mul
            (f32.load
              (i32.add
                (&WaveTableWork.base_frequency;)
                (local.get $wave_table_work_offset)
              )
            )
            (f32.convert_i32_s
              (i32.load
                (i32.add
                  (&WaveTable.size;)
                  (local.get $wave_table_offset)
                )
              )
            )
          ) 
        )

        (f32.store 
          (i32.add
            (&WaveTableWork.delta;)
            (local.get $wave_table_work_offset)
          )
          (local.tee $delta
            (f32.add 
              (local.get $delta)
              (f32.mul
                (f32.load
                  (i32.add
                    (&WaveTableWork.base.sample_rate;)
                    (local.get $wave_table_work_offset)
                  )
                )
                (f32.load
                  (i32.add
                    (&WaveTableWork.base.pitch;)
                    (local.get $wave_table_work_offset)
                  )
                )
              )
            )
          ) 
        )
        (return (local.get $value))
      )
    )

    (f32.store 
      (i32.add
        (&WaveTableWork.delta;)
        (local.get $wave_table_work_offset)
      )
      (local.get $delta )
    )

    (f32.load
      (i32.add
        (&WaveTableWork.base.value;)
        (local.get $wave_table_work_offset)
      )
    )
  )
  
  ;; -------------------------------------
  ;;  エンベロープジェネレータ 
  ;; -------------------------------------
  
  ;; ## 初期化 ##
  (func $initEnvelope 
    (param $env_param_offset i32)
    (param $flag i32)
    (param $sample_rate f32)
    (param $attack_time f32)
    (param $decay_time f32)
    (param $sustain_level f32)
    (param $release_time f32)

    ;; flag ;;

    (i32.store
      (i32.add
        (&Envelope.flag;)
        (local.get $env_param_offset)
      )
      (local.get $flag)
    )

    ;; attack ;;

    (f32.store
      (i32.add (&Envelope.attack_time;) (local.get $env_param_offset))
      (local.get $attack_time)
    )

    (f32.store 
      (i32.add (&Envelope.attack_delta;) (local.get $env_param_offset))
      (f32.div (f32.const 1)
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&Envelope.attack_time;) (local.get $env_param_offset)))
        )
      )
    )

    ;; decay ;;;;;;;;

    (f32.store
      (i32.add (&Envelope.decay_time;) (local.get $env_param_offset))
      (local.get $decay_time)
    )

    (f32.store 
      (i32.add (&Envelope.decay_delta;) (local.get $env_param_offset))
      (f32.div 
        (f32.sub 
          (f32.const 1) 
          (f32.load (i32.add (&Envelope.sustain_level;) (local.get $env_param_offset)))
        )
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&Envelope.decay_time;) (local.get $env_param_offset)))
        )
      )
    )

    ;; sustain ;;

    (f32.store
      (i32.add (&Envelope.sustain_level;) (local.get $env_param_offset))
      (local.get $sustain_level)
    )

    ;; release ;;

    (f32.store
      (i32.add (&Envelope.release_time;) (local.get $env_param_offset))
      (local.get $release_time)
    )

    (f32.store 
      (i32.add (&Envelope.release_delta;) (local.get $env_param_offset))
      (f32.div (f32.load (i32.add (&Envelope.sustain_level;) (local.get $env_param_offset)))
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&Envelope.release_time;) (local.get $env_param_offset)))
        )
      )
    )
  )

  ;; # エンベロープ・ワークエリアの初期化 #
  (func $initEnvelopeWork 
    (param $env_work_offset i32)
    (param $env_param_offset i32)
    
    ;; envelope parameter offset
    (i32.store
      (i32.add (&EnvelopeWork.env_param_offset;) (local.get $env_work_offset))
      (local.get $env_param_offset)
    )

    ;; counter 
    (f32.store 
      (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; step
    (i32.store 
      (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; flag 
    (i32.store 
      (i32.add (&EnvelopeWork.flag;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; value 
    (f32.store 
      (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
      (f32.const 0)
    )

  )

  ;; ## key on 処理 ##
  (func $keyOnEnvelope (param $env_work_offset i32)
    ;; flag ;;
    (i32.store 
      (i32.add (&EnvelopeWork.flag;) (local.get $env_work_offset))
      (i32.or (i32.const 0x80000000)
        (i32.load (i32.add (&EnvelopeWork.flag;) (local.get $env_work_offset)))
      )
    )
    ;; step ;;
    (i32.store 
      (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; counter ;; 
    (f32.store 
      (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; value ;; 
    (f32.store 
      (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
      (f32.const 0)
    )

  )

  ;; ## key off 処理 ##
  (func $KeyOffEnvelope 
    (param $env_work_offset i32)
    ;; flag ;;
    (i32.store 
      (i32.add (&EnvelopeWork.flag;) (local.get $env_work_offset))
      (i32.and 
       (i32.const 0x7fffffff)
       (i32.load (i32.add (&EnvelopeWork.flag;) (local.get $env_work_offset)))
      )
    )
    ;; step ;;
    (i32.store 
      (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
      (i32.const 3)
    )
    ;; counter
    (f32.store
      (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )    
  )

  ;; ## エンベロープ処理 ##
  (func $doEnvelope 
    (param $env_work_offset i32)
    (result f32)
    (local $env_param_offset i32) 
    (local $counter f32)
    (local $step i32)
    (local $value f32)

    (local.set $env_param_offset
      (i32.add (&EnvelopeWork.env_param_offset;) (local.get $env_work_offset))
    )

    (local.set $counter 
      (f32.load 
        (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
      )
    )

    (local.set $step
      (i32.load 
        (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
      )
    )

    (if (i32.eq (local.get $step) (i32.const -1))
      (return (f32.const 0))   
    )

    (local.set $value 
      (f32.load 
        (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
      )
    )

    (block $main
      (block $do_release
          (block $do_decay
            (block $do_attack
              (br_table $do_attack $do_decay $main $do_release 
                (local.get $step)
              )
            )

            ;; ### attack ###
            (if (f32.ge            
                  (local.tee $counter
                    (f32.add 
                      (f32.load (&delta;))
                      (local.get $counter)
                    )
                  )
                  (f32.load (i32.add (&Envelope.attack_time;) (local.get $env_param_offset)))
                 )
              (then
                (i32.store
                  (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
                  (i32.const 1)
                )

                (f32.store
                  (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
                  (local.tee $counter
                    (f32.const 0)
                  )
                )
                (f32.store (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
                  (local.tee $value 
                    (f32.const 1)
                  ) 
                )
              )
              (else
                (f32.store (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset) )
                  (local.tee $value
                    (f32.add (local.get $value)
                      (f32.load (i32.add(&Envelope.attack_delta;) (local.get $env_param_offset)))
                    )
                  )
                )
              )
            )
            (br $main)
          )
          ;; ### decay ###
          (if (f32.ge            
                (local.tee $counter
                  (f32.add 
                    (f32.load (&delta;))
                    (local.get $counter)
                  )
                )
                (f32.load (i32.add(&Envelope.decay_time;) (local.get $env_param_offset)))
                )
            (then
              (i32.store
                (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
                (i32.const 2)
              )

              (f32.store
                (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
                (local.tee $counter
                  (f32.const 0)
                )
              )
              (f32.store (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
                (local.tee $value 
                  (f32.load 
                      (i32.add (&Envelope.sustain_level;) (local.get $env_param_offset))
                  )
                ) 
              )
            )
            (else
              (f32.store (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
                (local.tee $value
                  (f32.sub (local.get $value)
                    (f32.load (i32.add (&Envelope.decay_delta;) (local.get $env_param_offset)))
                  )
                )
              )
            )
          )
          (br $main)
        )
      ;; ### release ###
      (if (f32.ge            
            (local.tee $counter
              (f32.add 
                (f32.load (&delta;))
                (local.get $counter)
              )
            )
            (f32.load (i32.add(&Envelope.release_time;) (local.get $env_param_offset)))
            )
        (then
          (i32.store
            (i32.add (&EnvelopeWork.step;) (local.get $env_work_offset))
            (i32.const -1)
          )
          (f32.store
            (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
            (local.tee $counter
              (f32.const 0)
            )
          )
          (f32.store (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
            (local.tee $value (f32.const 0)) 
          )
        )
        (else
          (f32.store (i32.add (&EnvelopeWork.value;) (local.get $env_work_offset))
            (local.tee $value
              (f32.sub (local.get $value)
                (f32.load (i32.add (&Envelope.decay_delta;) (local.get $env_param_offset)))
              )
            )
          )
        )
      )
      (br $main)
    )
    
    ;; カウンタを更新
    (f32.store 
      (i32.add (&EnvelopeWork.counter;) (local.get $env_work_offset))
      (local.get $counter)
    )

    ;; level * eg を出力 
    (return 
      (f32.mul 
        (local.get $value)
        (f32.load (i32.add (&Envelope.level;) (local.get $env_param_offset)))
      )
    )
  )

;; --------------------------
;; 音色
;; --------------------------


  (func $processTimbre
    (param $timbre_work_offset i32)
    (result i32)
    (local $oscillator_work_offset i32)
    (local $pitch_lfo_work_offset i32)
    (local $pitch i32)
  

    (local.set $oscillator_work_offset
      (i32.load
        (&TimbreWork.oscillator_offset;)
        (local.get $timber_work_offset)
      )
    )

    ;; Pitchの処理
    (f32.mul
     (f32.mul
      (local.tee $pitch
       (i32.load
        (i32.add
         (&TimbreWork.pitch;)
         (local.get $timbre_work_offset)
        )
       )
      )
      (call_indirect (type $oscillatorFunc)
       (local.tee $pitch_lfo_work_offset
        (i32.load
         (&TimbreWork.pitch_lfo;)
         (local.get $timber_work_offset)
        )
       )
       (i32.load
        (i32.add
         (&Oscillator.call_index;)
         (local.get $oscillator_work_offset)
        )
       )
      )
      )
  (call $doEnvelope
   (i32.load
    (&TimbreWork.pitch_envelope;)
    (local.get $timber_work_offset)
   )
  )
  )

    ;; オシレータ
    (local.get $oscillator_work_offset)
    (call_indirect $oscillatorFunc
      (i32.load
        (i32.add
          (&Oscillator.call_index;)
          (local.get $oscillator_work_offset)
        )
      )
    )
  )
)

