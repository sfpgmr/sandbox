(module
  (export "setRate" (func $set_rate))
  (export "init" (func $init))
  (export "reset" (func $reset))
  (export "doEnvelope" (func $do_envelope))
  (import "env" "memory" (memory $memory 0))

{@struct EnvParam
  i32 flag;
  f32 level;
  f32 attack_time;
  f32 decay_time;
  f32 sustain_level;
  f32 release_time;
}

{@struct EnvWork
  i32 step;
  f32 counter;
}

{@struct LFOParam
  i32 flag;
  i32 wave_form_offset;
  f32 level;
  f32 freq;
  EnvParam envelope;
  f32 counter;
}

{@struct LFOWork
  i32 offset;
  f32 counter;  
}

{@struct FilterParam
  i32 flag;
  i32 filter_type;
  f32 level;
  f32 freq;
  f32 resonance;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct FilterWork

}

{@struct AmplitudeParam
  i32 flag;
  f32 level;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct AmplitudeWork

}

{@struct PitchParam
  i32 flag;
  f32 freq;
  f32 detune;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct PitchWork

}

{@struct Timbre
  i32 wave_form_index;
  f32 master_level;
  PitchParam picth;
  AmplitudeParam amp;
  FilterParam filter;
}

{@struct Voice 
  i32 flag;
  i32 timber_offset;
  f32 volume;
  WaveWork wave;
  AmplitudeWork amp;
  PitchWork pitch;
  FilterWork filter;
}

{@map
  EnvParam env;
  EnvWork env_work;
  f32 sample_rate;
  f32 delta;
  i32 offset_start;
}

  (func $set_rate (param $r f32) 
    (f32.store (&sample_rate;) 
      (local.get $r)
    )
    (f32.store (&delta;)
      (f32.div
        (f32.const 1)
        (local.get $r)
      )
    )
  )
 
  (func $init 
    (call $reset)
  )

  (func $reset 
  )

  (func $update 
  )

  (;; 
   ####################################
    エンベロープジェネレータ 
   ####################################
  ;;)
  (func $doEnvelope 
    (param $env_param_offset i32) 
    (param $env_work_offset i32)
    (result f32)
    (local $counter f32)
    (local $step i32)

    (local.get $counter 
      (i32.load 
        (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      )
    )
    (if (f32.eqz (local.get $counter))
      (then
        ()
      )
    )
    
    (block $main
      (block $do_release
        (block $do_sustain
          (block $do_decay
            (block $do_attack
              (br_table $do_attack $do_decay $do_sustain $do_release 
                (i32.load 
                  (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                )
              )
            )
            ;; ### attack ###
            
            (if (f32.ge ())
              (then )
            )
          )
          ;; ### decay ###
        )
        ;; ### sustain ###
      )
      ;; ### release ###
    )
  )
)
