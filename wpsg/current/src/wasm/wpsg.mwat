(module
  (export "setRate" (func $set_rate))
  (export "initEnvelope" (func $initEnvelope))
  (export "initEnvWork" (func $initEnvWork))
  (export "keyOnEnvelope" (func $keyOnEnvelope))
  (export "keyOffEnvelope" (func $KeyOffEnvelope))
  (export "doEnvelope" (func $doEnvelope))

  (export "initWaveTableOscillator" (func $initWaveTableOscillator))
  (export "initWaveTable" (func $initWaveTable))
  (export "initWaveTableWork" (func $initWaveTableWork))
  
  (export "readWaveTable" (func $readWaveTable))

  (import "env" "memory" (memory $memory 1 10 shared))

(;;
###############################################################

Envelope Generator
    decay
   /\   sustain
  /  \_________   
 /             |\
/              | \
attack        release
|              |
keyon          keyoff

EnvParam .... エンベロープのパラメータ格納用
EnvWork .... エンベロープのインスタンス制御用ワーク

###############################################################
;;)

{@struct EnvParam
  i32 flag;
  f32 level;
  f32 attack_time;
  f32 decay_time;
  f32 sustain_level;
  f32 release_time;

  f32 attack_delta;
  f32 decay_delta;
  f32 release_delta;
}

{@struct EnvWork
  i32 env_param_offset;
  i32 flag;
  i32 step;
  f32 counter;
  f32 value;
}

{@struct LFOParam
  i32 flag;
  i32 wave_form_offset;
  f32 level;
  f32 freq;
  EnvParam envelope;
  f32 counter;
}

{@struct LFOWork
  i32 offset;
  f32 counter;  
}

{@struct FilterParam
  i32 flag;
  i32 filter_type;
  f32 level;
  f32 freq;
  f32 resonance;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct FilterWork
  i32 flag;
}

{@struct AmplitudeParam
  i32 flag;
  f32 level;
  EnvParam envelope;
  LFOParam lfo;
}

{@struct AmplitudeWork
  i32 flag;
  f32 counter;
}

{@struct PitchParam
  ;; 0 ... 無効
  ;; 1 ... 有効
  i32 flag;
  ;; ピッチ初期値
  f32 pitch;
  ;; デチューン初期値
  f32 detune;
  ;; ピッチ・エンベロープ
  EnvParam envelope;
  ;; LFO 
  LFOParam lfo;
}

{@struct PitchWork
  ;; ... 無効
  ;; ... 有効
  i32 flag;
  ;; ピッチの現在値
  f32 pitch;
  ;; エンベロープのワーク
  EnvWork env;
  ;; LFOのワークエリア
  LFOWork lfo;
}

{@struct OscillatorParam
  ;; フラグ
  ;; bit 0-4 : タイプ
  ;;  0000 ... WaveTable
  ;;  0001 ... WaveSample
  i32 flag;
  i32 offset;
}

{@struct OscillatorWork
  i32 offset;
}

;;
;; 波形メモリオシレータ
;; いわゆるwsgとかsccみたいなの
;;

{@struct WaveTable
  ;; サンプル・サイズは２のべき乗 (min:2 - max:128)
  ;; 1周期分
  ;; 基準周波数 440Hz
  i32 size;
  i32 wave_size_mask;
  ;; Waveデータ開始位置（最大128）
  f32 wave_data_start[128];
}

{@struct WaveTableWork
  i32 wave_table_offset;
  f32 base_sample_rate;
  f32 table_sample_rate;
  i32 counter;
  f32 delta;
  f32 pitch;
  f32 value;
}

;;
;; 波形メモリオシレータ（いわゆるサンプラー）  
;; まだ手をつけていない
;;

{@struct WaveSample

  ;; サンプル・サイズは任意
  i32 size;
  ;; フラグ
  ;; bit 0: 1 ... ループあり 0... ループなし
  i32 flag;
  ;; ループ開始オフセット
  i32 loop_start;
  ;; ループ終了オフセット
  i32 loop_end;
  ;; Waveデータ開始
  f32 wave_data_start;
  ;; サンプルのサンプルレート
  f32 sample_rate;
}


{@struct WaveFormWork
  f32 counter;
  f32 delta;
  f32 value;
}

;;
;; 音色パラメータ格納用
;;

{@struct Timbre
  ;; オシレータ
  OscillatorParam oscillator;
  ;; 音量
  AmplitudeParam amp;
  ;; ピッチ
  PitchParam picth;
  ;; フィルタ
;;  FilterParam filter;
}

;;
;; 発音処理用ワーク
;;

{@struct Voice 
  ;; フラグ
  i32 flag;
  ;; オシレータワークエリア
  OscillatorWork oscillator;
  ;; 音量ワークエリア
  AmplitudeWork amp;
  ;; ピッチワークエリア
  PitchWork pitch;
;;  FilterWork filter;
}

;;
;; メモリマップ 
;;

{@map
  ;; アロケート済みメモリのオフセット格納用
  i32 alloc_mem_offset;
  ;; オーディオ・インターフェースのサンプルレート
  f32 sample_rate;
  ;; サンプルレートの逆数 1 / sample_rate
  f32 delta;
  ;; 波形テーブル(16個分)
  WaveTable wave_table[16];
  ;; 波形メモリ用ワーク
  WaveTableWork wave_table_work[16];
  ;; 音色（16音色分）
  Timbre timbre[16];
  ;; ボイス（同時発生8ボイス）
  Voice voice[8];
  ;; メモリの先頭位置
  i32 mem_start;
}

  ;; 簡易メモリアロケータ 
  ;; 取ったら取りっぱなしのメモリーアロケータ

  ;; メモリ初期化
  (func $initMemory
    (i32.store
      (&alloc_mem_offset;)
      (&mem_start;)  
    )
  )

  ;; メモリのアロケート
  (func $allocMemory
    (param $size i32)
    (result i32)
    (local $mem_offset i32)
    (local $mem_page i32)
    (if
      (i32.gt 
        (local.tee $mem_page
          (i32.shr_u
            (local.tee $mem_offset
              (i32.add (local.get $size) (&alloc_mem_offset;))
            )
            (i32.const 16)
          )
        )
        (memory.size)
      )
      (then
        ;;メモリが足りない場合、必要な分だけページを拡張する
        (memory.grow
          (i32.sub
            (local.get $mem_page)
            (i32.const 1)
          )
        )
      )
    )

    (i32.store
      (&alloc_mem_offset;)
      (local.get $mem_offset)
    )
    (local.get $mem_offset)
  )

  (func $set_rate (param $r f32) 
    (f32.store (&sample_rate;) 
      (local.get $r)
    )
    (f32.store (&delta;)
      (f32.div
        (f32.const 1)
        (local.get $r)
      )
    )
  )

  ;;
  ;;  Wave Table
  ;;

  (func $initWaveTableOscillator
    (param $oscillator_param_offset i32)
    (param $wave_table_offset i32)

    (i32.store 
      (i32.add
        (&OscillatorParam.flag;)
        (local.get $oscillator_param_offset)
      )
      (i32.const 0)
    )

    (i32.store 
      (i32.add
        (&OscillatorParam.offset;)
        (local.get $oscillator_param_offset)
      )
      (local.get $wave_table_offset)
    )
  )

  (func $initOscillatorWork
    (param $osciilator_work_offset i32)
    (param $work_offset i32)
    (i32.store 
      (i32.add 
        (&OscillatorWork.offset)
        (local.get $osciilator_work_offset)
      )
      (local.get $work_offset)
    )
 )

  (func $initWaveTable
    ;; メモリオフセット
    (param $wave_table_offset i32)
    ;; サイズ（２のべき乗単位で2-128までの数値で指定）
    (param $size i32)
    ;; wave　dataのスタートオフセットを返す
    (result i32)

    (i32.store
      (i32.add
        (&WaveTable.size;)
        (local.get $wave_table_offset)
      )
      (local.get $size)
    )

    (i32.store
      (i32.add
        (&WaveTable.wave_size_mask;)
        (local.get $wave_table_offset)
      )
      (i32.sub
        (local.get $size)
        (i32.const 1)
      )
    )
    
    (return
      (i32.add
        (&WaveTable.wave_data_start;)
        (local.get $wave_table_offset)
      )
    ) 
    
  )

  (func $initWaveTableWork
    (param $oscillator_param_offset i32)
    (param $wave_table_work_offset i32)
    (param $wave_table_offset i32)

    
    (i32.store
      (i32.add 
        (&WaveTableWork.wave_table_offset;)
        (local.get $wave_table_work_offset)
      )
      (local.get $wave_table_offset)
    )
 
    (f32.store 
      (i32.add
        (&WaveTableWork.base_sample_rate;)
        (local.get $wave_table_work_offset)
      )
      (f32.load (&sample_rate;))
    )

    (f32.store 
      (i32.add
        (&WaveTableWork.table_sample_rate;)
        (local.get $wave_table_work_offset)
      )
      (f32.mul
        (f32.const 440 )
        (f32.convert_i32_s
          (i32.load
            (i32.add
              (&WaveTable.size;)
              (local.get $wave_table_offset)
            )
          )
        )
      )
    )

    (i32.store
      (i32.add
        (&WaveTableWork.counter;)
        (local.get $wave_table_work_offset)
      )
      (i32.const 0)
    )

    ;;pitch
    (f32.store
      (i32.add
        (&WaveTableWork.pitch;)
        (local.get $wave_table_work_offset)
      )
      (f32.const 1)
    )

    (f32.store
      (i32.add
        (&WaveTableWork.delta;)
        (local.get $wave_table_work_offset)
      )
      (f32.load
        (i32.add
          (&WaveTableWork.base_sample_rate;)
          (local.get $wave_table_work_offset)
        )
      )
    )

    (f32.store
      (i32.add
        (&WaveTableWork.value;)
        (local.get $wave_table_work_offset)
      )
      (f32.const 0)
    )
  )

  (func $readWaveTable
    (param $wave_table_work_offset i32)
    (result f32)
    (local $wave_table_offset i32)
    (local $counter i32)
    (local $value f32)
    (local $delta f32)

    (if 
      (f32.le
        (local.tee $delta
          (f32.sub 
            (local.tee $delta
              (f32.load
                (i32.add 
                  (&WaveTableWork.delta;)
                  (local.get $wave_table_work_offset)
                )
              )
            )
            (f32.load
              (i32.add
                (&WaveTableWork.table_sample_rate;)
                (local.get $wave_table_work_offset)
              )
            )
          )
        )
        (f32.const 0)
      )

      (then
        (local.set $wave_table_offset
          (i32.load
            (i32.add 
              (&WaveTableWork.wave_table_offset;)
              (local.get $wave_table_work_offset)
            )
          )
        )
        
        ;; delta を進め、波形データを$valueにセットする
        (f32.store 
          (i32.add
            (&WaveTableWork.value;)
            (local.get $wave_table_work_offset)
          )
          (local.tee $value
            (f32.load
              (i32.add 
                (i32.shl 
                  (local.tee $counter
                    (i32.and
                      (i32.add
                        (i32.load 
                          (i32.add
                            (&WaveTableWork.counter;)
                            (local.get $wave_table_work_offset)
                          )
                        )
                        (i32.const 1)
                      )
                      (i32.load 
                        (i32.add 
                          (&WaveTable.wave_size_mask;)
                          (local.get $wave_table_offset)
                        )
                      )
                    )
                  )
                  (i32.const 2)
                )
                (i32.add 
                  (&WaveTable.wave_data_start;)
                  (local.get $wave_table_offset)
                )
              )
            )
          )
        )

        (i32.store 
          (i32.add
            (&WaveTableWork.counter;)
            (local.get $wave_table_work_offset)
          )
          (local.get $counter)
        )

        ;; deltaをリセットする
        (f32.store 
          (i32.add
            (&WaveTableWork.delta;)
            (local.get $wave_table_work_offset)
          )
          (local.tee $delta
            (f32.add 
              (local.get $delta)
              (f32.mul
                (f32.load
                  (i32.add
                    (&WaveTableWork.base_sample_rate;)
                    (local.get $wave_table_work_offset)
                  )
                )
                (f32.load
                  (i32.add
                    (&WaveTableWork.pitch;)
                    (local.get $wave_table_work_offset)
                  )
                )
              )
            )
          ) 
        )
        (return (local.get $value))
      )
    )

    (f32.store 
      (i32.add
        (&WaveTableWork.delta;)
        (local.get $wave_table_work_offset)
      )
      (local.get $delta )
    )

    (f32.load
      (i32.add
        (&WaveTableWork.value;)
        (local.get $wave_table_work_offset)
      )
    )
  )
 
  (;; 
   ####################################
    エンベロープジェネレータ 
   ####################################
  ;;)
  ;; ## 初期化 ##
  (func $initEnvelope 
    (param $env_param_offset i32)
    (param $sample_rate f32)
    (param $attack f32)
    (param $decay f32)
    (param $sustain f32)
    (param $release f32)
    
    ;; attack ;;

    (f32.store
      (i32.add (&EnvParam.attack;) (local.get $env_param_offset))
      (local.get $attack)
    )

    (f32.store 
      (i32.add (&EnvParam.attack_delta;) (local.get $env_param_offset))
      (f32.div (f32.const 1)
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.attack_time;) (local.get $env_param_offset)))
        )
      )
    )

    ;; decay ;;;;;;;;

    (f32.store
      (i32.add (&EnvParam.decay;) (local.get $env_param_offset))
      (local.get $decay)
    )

    (f32.store 
      (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset))
      (f32.div 
        (f32.sub 
          (f32.const 1) 
          (f32.load (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset)))
        )
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.decay_time;) (local.get $env_param_offset)))
        )
      )
    )

    ;; sustain ;;

    (f32.store
      (i32.add (&EnvParam.sustain;) (local.get $env_param_offset))
      (local.get $sustain)
    )

    ;; release ;;

    (f32.store
      (i32.add (&EnvParam.release;) (local.get $env_param_offset))
      (local.get $release)
    )

    (f32.store 
      (i32.add (&EnvParam.release_delta;) (local.get $env_param_offset))
      (f32.div (f32.load (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset)))
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.release_time;) (local.get $env_param_offset)))
        )
      )
    )
  )

  (func $initEnvWork 
    (param $env_work_offset i32)
    (param $env_param_offset i32)
    
    ;; envelope parameter offset
    (f32.store
      (i32.add (&EnvWork.env_param_offset;) (local.get $env_work_offset))
      (local.get $env_param_offset)
    )

    ;; counter 
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; step
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; flag 
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; value 
    (f32.store 
      (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      (f32.const 0)
    )

  )

  (func $keyOnEnvelope (param $env_work_offset i32)
    ;; flag ;;
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.or (i32.const 0x80000000)
        (i32.load (i32.add (&EnvWork.flag;) (local.get $env_work_offset)))
      )
    )
    ;; step ;;
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; counter ;; 
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; value ;; 
    (f32.store 
      (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      (f32.const 0)
    )

  )

  (func $KeyOffEnvelope 
    (param $env_work_offset i32)
    ;; flag ;;
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.and 
       (i32.const 0x7fffffff)
       (i32.load (i32.add (&EnvWork.flag;) (local.get $env_work_offset)))
      )
    )
    ;; step ;;
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 3)
    )
    ;; counter
    (f32.store
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )    
  )

  (func $doEnvelope 
    (param $env_work_offset i32)
    (result f32)
    (local $env_param_offset i32) 
    (local $counter f32)
    (local $step i32)
    (local $value f32)

    (local.get $env_param_offset
      (i32.add
        (i32.add (&EnvWork.env_param_offset;) (local.get $env_work_offset))
      )
    )
    (local.set $counter 
      (f32.load 
        (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      )
    )

    (local.set $step
      (i32.load 
        (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      )
    )

    (if (i32.eq (local.get $step) (i32.const -1))
      (return (f32.const 0))   
    )

    (local.set $value 
      (f32.load 
        (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      )
    )

    (block $main
      (block $do_release
          (block $do_decay
            (block $do_attack
              (br_table $do_attack $do_decay $main $do_release 
                (local.get $step)
              )
            )

            ;; ### attack ###
            (if (f32.ge            
                  (local.tee $counter
                    (f32.add 
                      (f32.load (&delta;))
                      (local.get $counter)
                    )
                  )
                  (f32.load (i32.add (&EnvParam.attack_time;) (local.get $env_param_offset)))
                 )
              (then
                (i32.store
                  (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                  (i32.const 1)
                )

                (f32.store
                  (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
                  (local.tee $counter
                    (f32.const 0)
                  )
                )
                (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
                  (local.tee $value 
                    (f32.const 1)
                  ) 
                )
              )
              (else
                (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset) )
                  (local.tee $value
                    (f32.add (local.get $value)
                      (f32.load (i32.add(&EnvParam.attack_delta;) (local.get $env_param_offset)))
                    )
                  )
                )
              )
            )
            (br $main)
          )
          ;; ### decay ###
          (if (f32.ge            
                (local.tee $counter
                  (f32.add 
                    (f32.load (&delta;))
                    (local.get $counter)
                  )
                )
                (f32.load (i32.add(&EnvParam.decay_time;) (local.get $env_param_offset)))
                )
            (then
              (i32.store
                (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                (i32.const 2)
              )

              (f32.store
                (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
                (local.tee $counter
                  (f32.const 0)
                )
              )
              (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
                (local.tee $value 
                  (f32.load 
                      (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset))
                  )
                ) 
              )
            )
            (else
              (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
                (local.tee $value
                  (f32.sub (local.get $value)
                    (f32.load (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset)))
                  )
                )
              )
            )
          )
          (br $main)
        )
      ;; ### release ###
      (if (f32.ge            
            (local.tee $counter
              (f32.add 
                (f32.load (&delta;))
                (local.get $counter)
              )
            )
            (f32.load (i32.add(&EnvParam.release_time;) (local.get $env_param_offset)))
            )
        (then
          (i32.store
            (i32.add (&EnvWork.step;) (local.get $env_work_offset))
            (i32.const -1)
          )
          (f32.store
            (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
            (local.tee $counter
              (f32.const 0)
            )
          )
          (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
            (local.tee $value (f32.const 0)) 
          )
        )
        (else
          (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
            (local.tee $value
              (f32.sub (local.get $value)
                (f32.load (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset)))
              )
            )
          )
        )
      )
      (br $main)
    )
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (local.get $counter)
    )
    (return 
      (f32.mul 
        (local.get $value)
        (f32.load (i32.add (&EnvParam.level;) (local.get $env_param_offset)))
      )
    )
  )
)
