(module
  (export "setRate" (func $set_rate))
  (export "init" (func $init))
  (export "update" (func $update))
  (export "reset" (func $reset))
  (import "env" "memory" (memory $memory 0))

{@
// 20.12bitの固定小数点で計算
$.POINT_BITS = 12;
$.POINT_BITS_64 = 32;
$.SHIFT_BITS = 1 << $.POINT_BITS;
$.SHIFT_BITS_MASK = (1 << $.POINT_BITS) - 1;
$.DEFAULT_SAMPLE_RATE = 44100 << $.POINT_BITS;
$.DEFAULT_PITCH = 440 << $.POINT_BITS;
$.DEFAULT_VOLUME = 1 << $.POINT_BITS;
$.WAVE_LENGTH = 32;
}

{@struct Voice 
  i32 wave_table[8];
  i64 delta;
  i64 counter;
  i32 volume;
  i32 pitch;
  i32 position;
  i32 flag;
}

{@map
  f32 output_buffer[128];
  Voice voice[5];
  {
    // 正弦波で初期値をセットしておく
    let data = "";
    for(let i = 0,ei = 32;i < ei;++i){
      data += '\\' + (128 - (Math.sin(2 * Math.PI * i / 32) * 127) | 0).toString(16).padStart(2,'0');
    }
    let out = "";
    
    let voiceOffset = $.voice[$attributes].offset;
    const voiceSize = $.voice[$attributes].size;

    for(let i = 0;i < 5;++i){
      const offset =voiceOffset + i * voiceSize;
      out += `(data (i32.const ${offset}) "${data}")`;
    }
    return out;
  }
  i64 sample_rate;
}

  (func $set_rate (param $r i32) 
    (i64.store (&sample_rate;) 
      (select 
        (i64.const {$.DEFAULT_SAMPLE_RATE}) 
        (i64.shl (i64.extend_i32_s (local.get $r)) (i64.const {$.POINT_BITS_64}))
        (local.get $r) 
      )
    )
    (call $reset)
  )
 
  (func $init 
    (call $reset)
  )

  (func $reset 
    (local $c i32)
    (local $o i32) 

    (local.set $o (&voice[0];))

    (block $reset_exit
      (loop $reset_loop
        (br_if $reset_exit (i32.gt_s (local.get $o) (&voice[5];)))

        ;; sample_delta
        (i64.store (i32.add (&Voice.delta;) (local.get $o))
          (i64.shl (i64.extend_i32_s (i32.load (i32.add (&Voice.pitch;) (local.get $o)))) (i64.const 25))
        )

        ;; pitch
        (i32.store (i32.add (&Voice.pitch;) (local.get $o)) (i32.const {$.DEFAULT_PITCH}))


        ;; sample_counter
        (i64.store (i32.add (&Voice.counter;) (local.get $o)) (i64.const 0))

        ;; volume
        (i32.store (i32.add (&Voice.volume;) (local.get $o)) (i32.const {$.DEFAULT_VOLUME}))
    
        ;; position
        (i32.store (i32.add (&Voice.position;) (local.get $o)) (i32.const 0))
        
        (local.set $o (i32.add (local.get $o) (#Voice;)))
        (br $reset_loop)
      )
    )


  )

  (func $update 
    (local $i i32) (local $c i32) (local $o i32) 
    (local $sample_counter i32)
    (local $output f32)

    (local.set $i (&output_buffer;))

    (block $update_exit
      (loop $update_loop
        (br_if $update_exit (i32.gt_s (local.get $i) (i32.const {$ 128 * 4 })))
        (local.set $o (&voice[0];))
        (if (i32.and (i32.load (i32.add (&Voice.flag;) (local.get $o))) (i32.const 0x1))
          (then 
            (local.set $output (f32.const 0.0))
            (block $process_exit
              (loop $process_loop

                (local.set $sample_counter (i32.add (&Voice.counter;) (local.get $o)))

                (i64.store 
                  (local.get $sample_counter)
                  (i64.add 
                    (i64.load (local.get $sample_counter))
                    (i64.load (i32.add (&Voice.delta;) (local.get $o)) )
                  )
                )

                (if 
                  (i64.gt_s (i64.load (local.get $sample_counter)) (i64.load (&sample_rate;)) )
                  (then
                    (i32.store 
                      (i32.add (&Voice.position;) (local.get $o))
                      (i32.and 
                        (i32.add 
                          (i32.load (i32.add (&Voice.position;) (local.get $o)))
                          (i32.const 1)
                        )
                        (i32.const 0x1f)
                      )
                    )
                    (i64.store 
                      (local.get $sample_counter)
                      (i64.sub 
                        (i64.load (local.get $sample_counter))
                        (i64.load (&sample_rate;))
                      )
                    )
                  )
                )

                (local.set $output
                  (f32.add 
                    (local.get $output)
                    (f32.div
                      (f32.convert_i64_s
                        (i64.mul
                          (i64.load8_s
                            (i32.add 
                              (i32.load (i32.add (&Voice.position;) (local.get $o)))
                              (&Voice.wave_table[0];)
                            )
                          )
                          (i64.extend_i32_s
                            (i32.load (i32.add (&Voice.volume;) (local.get $o)))
                          )
                        )
                      )
                      (f32.const 8388608.0)
                    )
                  )
                )
                (local.set $o (i32.add (local.get $o) (#Voice;)))
                (br $process_loop)
              )
            )

            (f32.store (i32.add (&output_buffer;) (local.get $i))
              (select 
                (f32.const 1.0) 
                (select 
                  (f32.const -1.0)
                  (local.get $output)
                  (f32.lt (local.get $output) (f32.const -1.0))
                ) 
                (f32.gt (local.get $output) (f32.const 1.0))
              )
            )        
          )
        )

        (local.set $i (i32.add (local.get $i) (i32.const 4)))
        (br $update_loop)
      )
    )

  )

)
