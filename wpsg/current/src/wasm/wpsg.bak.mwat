(module
  (export "setRate" (func $set_rate))
  (export "init" (func $init))
  (export "update" (func $update))
  (export "reset" (func $reset))
  (import "env" "memory" (memory $memory 0))

{@struct WaveForm
  i32 flag;
  i32 offset;
  i32 read_offset;
  f32 volume;
}

{@struct WaveWork

}

{@struct EnvParam
  i32 flag;
  f32 level;
  f32 attack_time;
  f32 decay_time;
  f32 sustain_level;
  f32 release_time;
}

{@struct EnvWork
  i32 step;
  f32 counter;
}

{@struct LFOParam
  i32 flag;
  i32 wave_form_offset;
  f32 level;
  f32 freq;
  EnvParam envelope;
  f32 counter;
}

{@struct LFOWork
  i32 offset;
  f32 counter;  
}

{@struct FilterParam
  i32 flag;
  i32 filter_type;
  f32 level;
  f32 freq;
  f32 resonance;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct FilterWork

}

{@struct AmplitudeParam
  i32 flag;
  f32 level;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct AmplitudeWork

}

{@struct PitchParam
  i32 flag;
  f32 freq;
  f32 detune;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct PitchWork

}

{@struct Timbre
  i32 wave_form_index;
  f32 master_level;
  PitchParam picth;
  AmplitudeParam amp;
  FilterParam filter;
}

{@struct Voice 
  i32 flag;
  i32 timber_offset;
  f32 volume;
  WaveWork wave;
  AmplitudeWork amp;
  PitchWork pitch;
  FilterWork filter;
}

{@map
  Timbre timbre[64];
  Voice voice[8];
  i32 wave_table_offset_start;
  i32 buffer_offset_start;
  f64 counter;
  f32 sample_rate;
  f32 delta_time;
  i32 offset_start;
}

  (func $set_rate (param $r i32) 
    (i64.store (&sample_rate;) 
      (select 
        (i64.const {$.DEFAULT_SAMPLE_RATE}) 
        (i64.shl (i64.extend_i32_s (local.get $r)) (i64.const {$.POINT_BITS_64}))
        (local.get $r) 
      )
    )
    (call $reset)
  )
 
  (func $init 
    (call $reset)
  )

  (func $reset 
    (local $c i32)
    (local $o i32) 

    (local.set $o (&voice[0];))

    (block $reset_exit
      (loop $reset_loop
        (br_if $reset_exit (i32.gt_s (local.get $o) (&voice[5];)))

        ;; sample_delta
        (i64.store (i32.add (&Voice.delta;) (local.get $o))
          (i64.shl (i64.extend_i32_s (i32.load (i32.add (&Voice.pitch;) (local.get $o)))) (i64.const 25))
        )

        ;; pitch
        (i32.store (i32.add (&Voice.pitch;) (local.get $o)) (i32.const {$.DEFAULT_PITCH}))


        ;; sample_counter
        (i64.store (i32.add (&Voice.counter;) (local.get $o)) (i64.const 0))

        ;; volume
        (i32.store (i32.add (&Voice.volume;) (local.get $o)) (i32.const {$.DEFAULT_VOLUME}))
    
        ;; position
        (i32.store (i32.add (&Voice.position;) (local.get $o)) (i32.const 0))
        
        (local.set $o (i32.add (local.get $o) (#Voice;)))
        (br $reset_loop)
      )
    )


  )

  (func $update 
    (local $i i32) (local $c i32) (local $o i32) 
    (local $sample_counter i32)
    (local $output f32)

    (local.set $i (&output_buffer;))

    (block $update_exit
      (loop $update_loop
        (br_if $update_exit (i32.gt_s (local.get $i) (i32.const {$ 128 * 4 })))
        (local.set $o (&voice[0];))
        (if (i32.and (i32.load (i32.add (&Voice.flag;) (local.get $o))) (i32.const 0x1))
          (then 
            (local.set $output (f32.const 0.0))
            (block $process_exit
              (loop $process_loop

                (local.set $sample_counter (i32.add (&Voice.counter;) (local.get $o)))

                (i64.store 
                  (local.get $sample_counter)
                  (i64.add 
                    (i64.load (local.get $sample_counter))
                    (i64.load (i32.add (&Voice.delta;) (local.get $o)) )
                  )
                )

                (if 
                  (i64.gt_s (i64.load (local.get $sample_counter)) (i64.load (&sample_rate;)) )
                  (then
                    (i32.store 
                      (i32.add (&Voice.position;) (local.get $o))
                      (i32.and 
                        (i32.add 
                          (i32.load (i32.add (&Voice.position;) (local.get $o)))
                          (i32.const 1)
                        )
                        (i32.const 0x1f)
                      )
                    )
                    (i64.store 
                      (local.get $sample_counter)
                      (i64.sub 
                        (i64.load (local.get $sample_counter))
                        (i64.load (&sample_rate;))
                      )
                    )
                  )
                )

                (local.set $output
                  (f32.add 
                    (local.get $output)
                    (f32.div
                      (f32.convert_i64_s
                        (i64.mul
                          (i64.load8_s
                            (i32.add 
                              (i32.load (i32.add (&Voice.position;) (local.get $o)))
                              (&Voice.wave_table[0];)
                            )
                          )
                          (i64.extend_i32_s
                            (i32.load (i32.add (&Voice.volume;) (local.get $o)))
                          )
                        )
                      )
                      (f32.const 8388608.0)
                    )
                  )
                )
                (local.set $o (i32.add (local.get $o) (#Voice;)))
                (br $process_loop)
              )
            )

            (f32.store (i32.add (&output_buffer;) (local.get $i))
              (select 
                (f32.const 1.0) 
                (select 
                  (f32.const -1.0)
                  (local.get $output)
                  (f32.lt (local.get $output) (f32.const -1.0))
                ) 
                (f32.gt (local.get $output) (f32.const 1.0))
              )
            )        
          )
        )

        (local.set $i (i32.add (local.get $i) (i32.const 4)))
        (br $update_loop)
      )
    )

  )

)
