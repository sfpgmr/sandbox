(module
  (export "setRate" (func $set_rate))
  (export "initEnvelope" (func $initEnvelope))
  (export "initEnvWork" (func $initEnvWork))
  (export "keyOnEnvelope" (func $keyOnEnvelope))
  (export "keyOffEnvelope" (func $KeyOffEnvelope))
  (export "doEnvelope" (func $doEnvelope))
  (import "env" "memory" (memory $memory 1 10 shared))

(;;
###############################################################

Envelope Generator
    decay
   /\   sustain
  /  \_________   
 /             |\
/              | \
attack        release
|              |
keyon          keyoff

EnvParam .... エンベロープのパラメータ格納用
EnvWork .... エンベロープのインスタンス制御用ワーク

###############################################################
;;)

{@struct EnvParam
  i32 flag;
  f32 level;
  f32 attack_time;
  f32 decay_time;
  f32 sustain_level;
  f32 release_time;

  f32 attack_delta;
  f32 decay_delta;
  f32 release_delta;
}

{@struct EnvWork
  i32 flag;
  i32 step;
  f32 counter;
  f32 value;
}

{@struct LFOParam
  i32 flag;
  i32 wave_form_offset;
  f32 level;
  f32 freq;
  EnvParam envelope;
  f32 counter;
}

{@struct LFOWork
  i32 offset;
  f32 counter;  
}

{@struct FilterParam
  i32 flag;
  i32 filter_type;
  f32 level;
  f32 freq;
  f32 resonance;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct FilterWork
  i32 flag;
}

{@struct AmplitudeParam
  i32 flag;
  f32 level;
  EnvParam envelope;
  LFOParam lfo;
}

{@struct AmplitudeWork
  i32 flag;
  f32 counter;
}

{@struct PitchParam
  i32 flag;
  f32 freq;
  f32 detune;
  EnvParam envelope;
  LFOParam lfo;
  f32 counter;
}

{@struct PitchWork
  i32 flag;
}

{@struct WaveFormParam
  i32 flag;
  i32 size;
  i32 wave_table_offset;
  f32 sample_rate;
}

{@struct WaveTable
  (;; flag  
    0b0000_0000_0000_0000
    bit 31:  1... enable  0... disable
    bit 24-27: 0000 ... wave table mode 0001 ... sampler mode
  ;;)
  i32 flag;
  i32 size;
  (;; wave data is 8bit x 32bytes ;;)
  i32 wave_data[4];
}

{@struct WaveFormWork
  f32 counter;
  f32 delta;
  f32 value;
}

{@struct Timbre
  i32 wave_form_index;
  f32 master_level;
  PitchParam picth;
  AmplitudeParam amp;
  FilterParam filter;
}

{@struct Voice 
  i32 flag;
  i32 timber_offset;
  f32 volume;
  AmplitudeWork amp;
  PitchWork pitch;
  FilterWork filter;
}

{@map
  EnvParam env;
  EnvWork env_work;
  f32 sample_rate;
  f32 delta;
  i32 offset_start;
}

  (func $set_rate (param $r f32) 
    (f32.store (&sample_rate;) 
      (local.get $r)
    )
    (f32.store (&delta;)
      (f32.div
        (f32.const 1)
        (local.get $r)
      )
    )
  )
 
  (;; 
   ####################################
    エンベロープジェネレータ 
   ####################################
  ;;)
  ;; ## 初期化 ##
  (func $initEnvelope 
    (param $env_param_offset i32) 
    (param $sample_rate f32)

    ;; attack ;;;;;;;
    (f32.store 
      (i32.add (&EnvParam.attack_delta;) (local.get $env_param_offset))
      (f32.div (f32.const 1)
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.attack_time;) (local.get $env_param_offset)))
        )
      )
    )
    ;; decay ;;;;;;;;
    (f32.store 
      (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset))
      (f32.div 
        (f32.sub 
          (f32.const 1) 
          (f32.load (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset)))
        )
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.decay_time;) (local.get $env_param_offset)))
        )
      )
    )
    ;; release ;;;;;;
    (f32.store 
      (i32.add (&EnvParam.release_delta;) (local.get $env_param_offset))
      (f32.div (f32.load (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset)))
        (f32.mul 
          (local.get $sample_rate)
          (f32.load (i32.add (&EnvParam.release_time;) (local.get $env_param_offset)))
        )
      )
    )
  )

  (func $initEnvWork (param $env_work_offset i32)
    ;; counter 
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; step
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; flag 
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; value 
    (f32.store 
      (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      (f32.const 0)
    )
  )

  (func $keyOnEnvelope (param $env_work_offset i32)
    ;; flag ;;
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.or (i32.const 0x80000000)
        (i32.load (i32.add (&EnvWork.flag;) (local.get $env_work_offset)))
      )
    )
    ;; step ;;
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 0)
    )

    ;; counter ;; 
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )

    ;; value ;; 
    (f32.store 
      (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      (f32.const 0)
    )

  )

  (func $KeyOffEnvelope 
    (param $env_work_offset i32)
    ;; flag ;;
    (i32.store 
      (i32.add (&EnvWork.flag;) (local.get $env_work_offset))
      (i32.and 
       (i32.const 0x7fffffff)
       (i32.load (i32.add (&EnvWork.flag;) (local.get $env_work_offset)))
      )
    )
    ;; step ;;
    (i32.store 
      (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      (i32.const 3)
    )
    ;; counter
    (f32.store
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (f32.const 0)
    )    
  )

  (func $doEnvelope 
    (param $env_param_offset i32) 
    (param $env_work_offset i32)
    (result f32)
    (local $counter f32)
    (local $step i32)
    (local $value f32)

    (local.set $counter 
      (f32.load 
        (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      )
    )

    (local.set $step
      (i32.load 
        (i32.add (&EnvWork.step;) (local.get $env_work_offset))
      )
    )

    (if (i32.eq (local.get $step) (i32.const -1))
      (return (f32.const 0))   
    )

    (local.set $value 
      (f32.load 
        (i32.add (&EnvWork.value;) (local.get $env_work_offset))
      )
    )

    (block $main
      (block $do_release
          (block $do_decay
            (block $do_attack
              (br_table $do_attack $do_decay $main $do_release 
                (local.get $step)
              )
            )

            ;; ### attack ###
            (if (f32.ge            
                  (local.tee $counter
                    (f32.add 
                      (f32.load (&delta;))
                      (local.get $counter)
                    )
                  )
                  (f32.load (i32.add (&EnvParam.attack_time;) (local.get $env_param_offset)))
                 )
              (then
                (i32.store
                  (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                  (i32.const 1)
                )

                (f32.store
                  (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
                  (local.tee $counter
                    (f32.const 0)
                  )
                )
                (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
                  (local.tee $value 
                    (f32.const 1)
                  ) 
                )
              )
              (else
                (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset) )
                  (local.tee $value
                    (f32.add (local.get $value)
                      (f32.load (i32.add(&EnvParam.attack_delta;) (local.get $env_param_offset)))
                    )
                  )
                )
              )
            )
            (br $main)
          )
          ;; ### decay ###
          (if (f32.ge            
                (local.tee $counter
                  (f32.add 
                    (f32.load (&delta;))
                    (local.get $counter)
                  )
                )
                (f32.load (i32.add(&EnvParam.decay_time;) (local.get $env_param_offset)))
                )
            (then
              (i32.store
                (i32.add (&EnvWork.step;) (local.get $env_work_offset))
                (i32.const 2)
              )

              (f32.store
                (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
                (local.tee $counter
                  (f32.const 0)
                )
              )
              (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
                (local.tee $value 
                  (f32.load 
                      (i32.add (&EnvParam.sustain_level;) (local.get $env_param_offset))
                  )
                ) 
              )
            )
            (else
              (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
                (local.tee $value
                  (f32.sub (local.get $value)
                    (f32.load (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset)))
                  )
                )
              )
            )
          )
          (br $main)
        )
      ;; ### release ###
      (if (f32.ge            
            (local.tee $counter
              (f32.add 
                (f32.load (&delta;))
                (local.get $counter)
              )
            )
            (f32.load (i32.add(&EnvParam.release_time;) (local.get $env_param_offset)))
            )
        (then
          (i32.store
            (i32.add (&EnvWork.step;) (local.get $env_work_offset))
            (i32.const -1)
          )
          (f32.store
            (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
            (local.tee $counter
              (f32.const 0)
            )
          )
          (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
            (local.tee $value (f32.const 0)) 
          )
        )
        (else
          (f32.store (i32.add (&EnvWork.value;) (local.get $env_work_offset))
            (local.tee $value
              (f32.sub (local.get $value)
                (f32.load (i32.add (&EnvParam.decay_delta;) (local.get $env_param_offset)))
              )
            )
          )
        )
      )
      (br $main)
    )
    (f32.store 
      (i32.add (&EnvWork.counter;) (local.get $env_work_offset))
      (local.get $counter)
    )
    (return 
      (f32.mul 
        (local.get $value)
        (f32.load (i32.add (&EnvParam.level;) (local.get $env_param_offset)))
      )
    )
  )
)
