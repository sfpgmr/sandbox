[
  {
    "section": "Tabs",
    "testno": 7,
    "markdown": "-\t\tfoo\n",
    "expected": "<ul>\n<li>\n<pre><code>  foo\n</code></pre>\n</li>\n</ul>\n",
    "actual": "<ul>\n<li>foo</li>\n</ul>\n"
  },
  {
    "section": "ATX headings",
    "testno": 49,
    "markdown": "## \n#\n### ###\n",
    "expected": "<h2></h2>\n<h1></h1>\n<h3></h3>\n",
    "actual": "<h2></h2>\n<p>#</p>\n<h3>###</h3>\n"
  },
  {
    "section": "Setext headings",
    "testno": 51,
    "markdown": "Foo *bar\nbaz*\n====\n",
    "expected": "<h1>Foo <em>bar\nbaz</em></h1>\n",
    "actual": "<p>Foo <em>bar\nbaz</em>\n====</p>\n"
  },
  {
    "section": "Setext headings",
    "testno": 52,
    "markdown": "  Foo *bar\nbaz*\t\n====\n",
    "expected": "<h1>Foo <em>bar\nbaz</em></h1>\n",
    "actual": "<p>  Foo <em>bar\nbaz</em><br>====</p>\n"
  },
  {
    "section": "Setext headings",
    "testno": 65,
    "markdown": "Foo\nBar\n---\n",
    "expected": "<h2>Foo\nBar</h2>\n",
    "actual": "<p>Foo\nBar</p>\n<hr>\n"
  },
  {
    "section": "Link reference definitions",
    "testno": 164,
    "markdown": "[Foo bar]:\n<my url>\n'title'\n\n[Foo bar]\n",
    "expected": "<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>\n",
    "actual": "<p>[Foo bar]:\n<my url>\n&#39;title&#39;</p>\n<p>[Foo bar]</p>\n"
  },
  {
    "section": "Link reference definitions",
    "testno": 169,
    "markdown": "[foo]: <>\n\n[foo]\n",
    "expected": "<p><a href=\"\">foo</a></p>\n",
    "actual": "<p><a href=\"%3C\">foo</a></p>\n"
  },
  {
    "section": "Link reference definitions",
    "testno": 171,
    "markdown": "[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n",
    "expected": "<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>\n",
    "actual": "<p><a href=\"/url%5Cbar%5C*baz\" title=\"foo\\&quot;bar\\baz\">foo</a></p>\n"
  },
  {
    "section": "Block quotes",
    "testno": 206,
    "markdown": ">     foo\n    bar\n",
    "expected": "<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>\n",
    "actual": "<blockquote>\n<pre><code>foo\nbar</code></pre>\n</blockquote>\n"
  },
  {
    "section": "Block quotes",
    "testno": 207,
    "markdown": "> ```\nfoo\n```\n",
    "expected": "<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>\n",
    "actual": "<blockquote>\n<pre><code>foo</code></pre>\n</blockquote>\n<pre><code></code></pre>\n"
  },
  {
    "section": "List items",
    "testno": 225,
    "markdown": "- one\n\n two\n",
    "expected": "<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n",
    "actual": "<ul>\n<li><p>one</p>\n<p>two</p>\n</li>\n</ul>\n"
  },
  {
    "section": "List items",
    "testno": 227,
    "markdown": " -    one\n\n     two\n",
    "expected": "<ul>\n<li>one</li>\n</ul>\n<pre><code> two\n</code></pre>\n",
    "actual": "<ul>\n<li><p>one</p>\n<p>two</p>\n</li>\n</ul>\n"
  },
  {
    "section": "List items",
    "testno": 232,
    "markdown": "- foo\n\n\n  bar\n",
    "expected": "<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n",
    "actual": "<ul>\n<li>foo</li>\n</ul>\n<p>  bar</p>\n"
  },
  {
    "section": "List items",
    "testno": 234,
    "markdown": "- Foo\n\n      bar\n\n\n      baz\n",
    "expected": "<ul>\n<li>\n<p>Foo</p>\n<pre><code>bar\n\n\nbaz\n</code></pre>\n</li>\n</ul>\n",
    "actual": "<ul>\n<li><p>Foo</p>\n<pre><code>bar</code></pre>\n</li>\n</ul>\n<pre><code>  baz</code></pre>\n"
  },
  {
    "section": "List items",
    "testno": 243,
    "markdown": "1.     indented code\n\n   paragraph\n\n       more code\n",
    "expected": "<ol>\n<li>\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n",
    "actual": "<ol>\n<li><p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>\n"
  },
  {
    "section": "List items",
    "testno": 244,
    "markdown": "1.      indented code\n\n   paragraph\n\n       more code\n",
    "expected": "<ol>\n<li>\n<pre><code> indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n",
    "actual": "<ol>\n<li><p>indented code</p>\n<p>paragraph</p>\n<p>more code</p>\n</li>\n</ol>\n"
  },
  {
    "section": "List items",
    "testno": 246,
    "markdown": "-    foo\n\n  bar\n",
    "expected": "<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n",
    "actual": "<ul>\n<li><p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n"
  },
  {
    "section": "List items",
    "testno": 248,
    "markdown": "-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n",
    "expected": "<ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<pre><code>baz\n</code></pre>\n</li>\n</ul>\n",
    "actual": "<p>-\n  foo\n-</p>\n<pre><code>bar</code></pre>\n<p>-\n      baz</p>\n"
  },
  {
    "section": "List items",
    "testno": 250,
    "markdown": "-\n\n  foo\n",
    "expected": "<ul>\n<li></li>\n</ul>\n<p>foo</p>\n",
    "actual": "<p>-</p>\n<p>  foo</p>\n"
  },
  {
    "section": "List items",
    "testno": 254,
    "markdown": "*\n",
    "expected": "<ul>\n<li></li>\n</ul>\n",
    "actual": "<p>*</p>\n"
  },
  {
    "section": "List items",
    "testno": 265,
    "markdown": "- foo\n - bar\n  - baz\n   - boo\n",
    "expected": "<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>\n",
    "actual": "<ul>\n<li>foo<ul>\n<li>bar</li>\n<li>baz<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"
  },
  {
    "section": "List items",
    "testno": 267,
    "markdown": "10) foo\n   - bar\n",
    "expected": "<ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>\n",
    "actual": "<ol start=\"10\">\n<li>foo<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n"
  },
  {
    "section": "Lists",
    "testno": 271,
    "markdown": "- foo\n- bar\n+ baz\n",
    "expected": "<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n",
    "actual": "<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n</ul>\n"
  },
  {
    "section": "Lists",
    "testno": 276,
    "markdown": "- foo\n\n- bar\n\n\n- baz\n",
    "expected": "<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n",
    "actual": "<ul>\n<li><p>foo</p>\n</li>\n<li><p>bar</p>\n</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n"
  },
  {
    "section": "Lists",
    "testno": 277,
    "markdown": "- foo\n  - bar\n    - baz\n\n\n      bim\n",
    "expected": "<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
    "actual": "<ul>\n<li>foo<ul>\n<li>bar<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>  bim</code></pre>\n"
  },
  {
    "section": "Lists",
    "testno": 280,
    "markdown": "- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n",
    "expected": "<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n",
    "actual": "<ul>\n<li>a<ul>\n<li>b</li>\n<li>c<ul>\n<li>d</li>\n</ul>\n</li>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n<li>g</li>\n</ul>\n"
  },
  {
    "section": "Lists",
    "testno": 281,
    "markdown": "1. a\n\n  2. b\n\n   3. c\n",
    "expected": "<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n",
    "actual": "<ol>\n<li><p>a</p>\n<ol start=\"2\">\n<li><p>b</p>\n</li>\n<li><p>c</p>\n</li>\n</ol>\n</li>\n</ol>\n"
  },
  {
    "section": "Lists",
    "testno": 282,
    "markdown": "- a\n - b\n  - c\n   - d\n    - e\n",
    "expected": "<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n",
    "actual": "<ul>\n<li>a<ul>\n<li>b</li>\n<li>c<ul>\n<li>d</li>\n<li>e</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"
  },
  {
    "section": "Lists",
    "testno": 283,
    "markdown": "1. a\n\n  2. b\n\n    3. c\n",
    "expected": "<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n",
    "actual": "<ol>\n<li><p>a</p>\n<ol start=\"2\">\n<li><p>b</p>\n<ol start=\"3\">\n<li>c</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n"
  },
  {
    "section": "Lists",
    "testno": 287,
    "markdown": "- a\n- b\n\n  [ref]: /url\n- d\n",
    "expected": "<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n",
    "actual": "<ul>\n<li>a</li>\n<li>b</li>\n</ul>\n<ul>\n<li>d</li>\n</ul>\n"
  },
  {
    "section": "Lists",
    "testno": 288,
    "markdown": "- a\n- ```\n  b\n\n\n  ```\n- c\n",
    "expected": "<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n",
    "actual": "<ul>\n<li>a</li>\n<li><pre><code>b\n\n</code></pre>\n</li>\n</ul>\n<pre><code>- c</code></pre>\n"
  },
  {
    "section": "Lists",
    "testno": 289,
    "markdown": "- a\n  - b\n\n    c\n- d\n",
    "expected": "<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n",
    "actual": "<ul>\n<li><p>a</p>\n<ul>\n<li><p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li><p>d</p>\n</li>\n</ul>\n"
  },
  {
    "section": "Backslash escapes",
    "testno": 309,
    "markdown": "[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n",
    "expected": "<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n",
    "actual": "<p><a href=\"/bar%5C*\" title=\"ti\\*tle\">foo</a></p>\n"
  },
  {
    "section": "Backslash escapes",
    "testno": 310,
    "markdown": "``` foo\\+bar\nfoo\n```\n",
    "expected": "<pre><code class=\"language-foo+bar\">foo\n</code></pre>\n",
    "actual": "<pre><code class=\"language-foo\\+bar\">foo</code></pre>\n"
  },
  {
    "section": "Entity and numeric character references",
    "testno": 314,
    "markdown": "&nbsp &x; &#; &#x;\n&#987654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n",
    "expected": "<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#987654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>\n",
    "actual": "<p>&amp;nbsp &x; &amp;#; &#x;\n&#987654321;\n&#abcdef0;\n&ThisIsNotDefined; &amp;hi?;</p>\n"
  },
  {
    "section": "Entity and numeric character references",
    "testno": 318,
    "markdown": "[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n",
    "expected": "<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>\n",
    "actual": "<p><a href=\"/f&ouml;&ouml;\" title=\"f&ouml;&ouml;\">foo</a></p>\n"
  },
  {
    "section": "Entity and numeric character references",
    "testno": 319,
    "markdown": "[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n",
    "expected": "<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>\n",
    "actual": "<p><a href=\"/f&ouml;&ouml;\" title=\"f&ouml;&ouml;\">foo</a></p>\n"
  },
  {
    "section": "Entity and numeric character references",
    "testno": 320,
    "markdown": "``` f&ouml;&ouml;\nfoo\n```\n",
    "expected": "<pre><code class=\"language-föö\">foo\n</code></pre>\n",
    "actual": "<pre><code class=\"language-f&amp;ouml;&amp;ouml;\">foo</code></pre>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 361,
    "markdown": "пристаням_стремятся_\n",
    "expected": "<p>пристаням_стремятся_</p>\n",
    "actual": "<p>пристаням<em>стремятся</em></p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 387,
    "markdown": "пристаням__стремятся__\n",
    "expected": "<p>пристаням__стремятся__</p>\n",
    "actual": "<p>пристаням<strong>стремятся</strong></p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 388,
    "markdown": "__foo, __bar__, baz__\n",
    "expected": "<p><strong>foo, <strong>bar</strong>, baz</strong></p>\n",
    "actual": "<p><strong>foo, __bar</strong>, baz__</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 407,
    "markdown": "__foo_ bar_\n",
    "expected": "<p><em><em>foo</em> bar</em></p>\n",
    "actual": "<p>__foo_ bar_</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 412,
    "markdown": "***foo** bar*\n",
    "expected": "<p><em><strong>foo</strong> bar</em></p>\n",
    "actual": "<p>*<strong>foo</strong> bar*</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 415,
    "markdown": "foo***bar***baz\n",
    "expected": "<p>foo<em><strong>bar</strong></em>baz</p>\n",
    "actual": "<p>foo**<em>bar**</em>baz</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 416,
    "markdown": "foo******bar*********baz\n",
    "expected": "<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>\n",
    "actual": "<p>foo*<strong><strong><em>bar****</em></strong></strong>baz</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 424,
    "markdown": "__foo __bar__ baz__\n",
    "expected": "<p><strong>foo <strong>bar</strong> baz</strong></p>\n",
    "actual": "<p><strong>foo __bar</strong> baz__</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 425,
    "markdown": "____foo__ bar__\n",
    "expected": "<p><strong><strong>foo</strong> bar</strong></p>\n",
    "actual": "<p><strong>__foo</strong> bar__</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 442,
    "markdown": "*foo**\n",
    "expected": "<p><em>foo</em>*</p>\n",
    "actual": "<p>*foo**</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 445,
    "markdown": "**foo***\n",
    "expected": "<p><strong>foo</strong>*</p>\n",
    "actual": "<p>*<em>foo**</em></p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 446,
    "markdown": "*foo****\n",
    "expected": "<p><em>foo</em>***</p>\n",
    "actual": "<p>*foo****</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 453,
    "markdown": "__foo_\n",
    "expected": "<p>_<em>foo</em></p>\n",
    "actual": "<p>__foo_</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 454,
    "markdown": "_foo__\n",
    "expected": "<p><em>foo</em>_</p>\n",
    "actual": "<p>_foo__</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 455,
    "markdown": "___foo__\n",
    "expected": "<p>_<strong>foo</strong></p>\n",
    "actual": "<p>___foo__</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 456,
    "markdown": "____foo_\n",
    "expected": "<p>___<em>foo</em></p>\n",
    "actual": "<p>____foo_</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 457,
    "markdown": "__foo___\n",
    "expected": "<p><strong>foo</strong>_</p>\n",
    "actual": "<p>__foo___</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 458,
    "markdown": "_foo____\n",
    "expected": "<p><em>foo</em>___</p>\n",
    "actual": "<p>_foo____</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 465,
    "markdown": "******foo******\n",
    "expected": "<p><strong><strong><strong>foo</strong></strong></strong></p>\n",
    "actual": "<p><strong>**</strong>foo******</p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 466,
    "markdown": "***foo***\n",
    "expected": "<p><em><strong>foo</strong></em></p>\n",
    "actual": "<p><strong><em>foo</em></strong></p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 467,
    "markdown": "_____foo_____\n",
    "expected": "<p><em><strong><strong>foo</strong></strong></em></p>\n",
    "actual": "<p><strong><strong><em>foo</em></strong></strong></p>\n"
  },
  {
    "section": "Emphasis and strong emphasis",
    "testno": 470,
    "markdown": "**foo **bar baz**\n",
    "expected": "<p>**foo <strong>bar baz</strong></p>\n",
    "actual": "<p><strong>foo **bar baz</strong></p>\n"
  },
  {
    "section": "Links",
    "testno": 486,
    "markdown": "[link](</my uri>)\n",
    "expected": "<p><a href=\"/my%20uri\">link</a></p>\n",
    "actual": "<p>[link](&lt;/my uri&gt;)</p>\n"
  },
  {
    "section": "Links",
    "testno": 489,
    "markdown": "[a](<b)c>)\n",
    "expected": "<p><a href=\"b)c\">a</a></p>\n",
    "actual": "<p><a href=\"%3Cb\">a</a>c&gt;)</p>\n"
  },
  {
    "section": "Links",
    "testno": 490,
    "markdown": "[link](<foo\\>)\n",
    "expected": "<p>[link](&lt;foo&gt;)</p>\n",
    "actual": "<p><a href=\"foo%5C\">link</a></p>\n"
  },
  {
    "section": "Links",
    "testno": 491,
    "markdown": "[a](<b)c\n[a](<b)c>\n[a](<b>c)\n",
    "expected": "<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>\n",
    "actual": "<p><a href=\"%3Cb\">a</a>c\n<a href=\"%3Cb\">a</a>c&gt;\n<a href=\"%3Cb%3Ec\">a</a></p>\n"
  },
  {
    "section": "Links",
    "testno": 499,
    "markdown": "[link](foo%20b&auml;)\n",
    "expected": "<p><a href=\"foo%20b%C3%A4\">link</a></p>\n",
    "actual": "<p><a href=\"foo%20b&auml;\">link</a></p>\n"
  },
  {
    "section": "Links",
    "testno": 503,
    "markdown": "[link](/url \"title\")\n",
    "expected": "<p><a href=\"/url%C2%A0%22title%22\">link</a></p>\n",
    "actual": "<p><a href=\"/url\" title=\"title\">link</a></p>\n"
  },
  {
    "section": "Links",
    "testno": 508,
    "markdown": "[link [foo [bar]]](/uri)\n",
    "expected": "<p><a href=\"/uri\">link [foo [bar]]</a></p>\n",
    "actual": "<p>[link [foo [bar]]](/uri)</p>\n"
  },
  {
    "section": "Links",
    "testno": 514,
    "markdown": "[foo [bar](/uri)](/uri)\n",
    "expected": "<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>\n",
    "actual": "<p><a href=\"/uri\">foo <a href=\"/uri\">bar</a></a></p>\n"
  },
  {
    "section": "Links",
    "testno": 515,
    "markdown": "[foo *[bar [baz](/uri)](/uri)*](/uri)\n",
    "expected": "<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>\n",
    "actual": "<p>[foo *<a href=\"/uri\">bar <a href=\"/uri\">baz</a></a>*](/uri)</p>\n"
  },
  {
    "section": "Links",
    "testno": 516,
    "markdown": "![[[foo](uri1)](uri2)](uri3)\n",
    "expected": "<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>\n",
    "actual": "<p>![<a href=\"uri2\"><a href=\"uri1\">foo</a></a>](uri3)</p>\n"
  },
  {
    "section": "Links",
    "testno": 520,
    "markdown": "[foo <bar attr=\"](baz)\">\n",
    "expected": "<p>[foo <bar attr=\"](baz)\"></p>\n",
    "actual": "<p><a href=\"baz\">foo &lt;bar attr=&quot;</a>&quot;&gt;</p>\n"
  },
  {
    "section": "Links",
    "testno": 522,
    "markdown": "[foo<http://example.com/?search=](uri)>\n",
    "expected": "<p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>\n",
    "actual": "<p><a href=\"uri\">foo&lt;http://example.com/?search=</a>&gt;</p>\n"
  },
  {
    "section": "Links",
    "testno": 524,
    "markdown": "[link [foo [bar]]][ref]\n\n[ref]: /uri\n",
    "expected": "<p><a href=\"/uri\">link [foo [bar]]</a></p>\n",
    "actual": "<p>[link [foo [bar]]]<a href=\"/uri\">ref</a></p>\n"
  },
  {
    "section": "Links",
    "testno": 528,
    "markdown": "[foo [bar](/uri)][ref]\n\n[ref]: /uri\n",
    "expected": "<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>\n",
    "actual": "<p><a href=\"/uri\">foo <a href=\"/uri\">bar</a></a></p>\n"
  },
  {
    "section": "Links",
    "testno": 529,
    "markdown": "[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n",
    "expected": "<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>\n",
    "actual": "<p><a href=\"/uri\">foo <em>bar <a href=\"/uri\">baz</a></em></a></p>\n"
  },
  {
    "section": "Links",
    "testno": 532,
    "markdown": "[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n",
    "expected": "<p>[foo <bar attr=\"][ref]\"></p>\n",
    "actual": "<p><a href=\"/uri\">foo &lt;bar attr=&quot;</a>&quot;&gt;</p>\n"
  },
  {
    "section": "Links",
    "testno": 534,
    "markdown": "[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n",
    "expected": "<p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>\n",
    "actual": "<p><a href=\"/uri\">foo&lt;http://example.com/?search=</a>&gt;</p>\n"
  },
  {
    "section": "Images",
    "testno": 569,
    "markdown": "![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n",
    "expected": "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n",
    "actual": "<p><img src=\"train.jpg\" alt=\"foo *bar*\" title=\"train &amp; tracks\"></p>\n"
  },
  {
    "section": "Images",
    "testno": 570,
    "markdown": "![foo ![bar](/url)](/url2)\n",
    "expected": "<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n",
    "actual": "<p><img src=\"/url2\" alt=\"foo ![bar](/url)\"></p>\n"
  },
  {
    "section": "Images",
    "testno": 571,
    "markdown": "![foo [bar](/url)](/url2)\n",
    "expected": "<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n",
    "actual": "<p><img src=\"/url2\" alt=\"foo [bar](/url)\"></p>\n"
  },
  {
    "section": "Images",
    "testno": 572,
    "markdown": "![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n",
    "expected": "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n",
    "actual": "<p><img src=\"train.jpg\" alt=\"foo *bar*\" title=\"train &amp; tracks\"></p>\n"
  },
  {
    "section": "Images",
    "testno": 573,
    "markdown": "![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n",
    "expected": "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n",
    "actual": "<p><img src=\"train.jpg\" alt=\"foo *bar*\" title=\"train &amp; tracks\"></p>\n"
  },
  {
    "section": "Images",
    "testno": 581,
    "markdown": "![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n",
    "expected": "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n",
    "actual": "<p><img src=\"/url\" alt=\"*foo* bar\" title=\"title\"></p>\n"
  },
  {
    "section": "Images",
    "testno": 585,
    "markdown": "![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n",
    "expected": "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n",
    "actual": "<p><img src=\"/url\" alt=\"*foo* bar\" title=\"title\"></p>\n"
  },
  {
    "section": "Autolinks",
    "testno": 598,
    "markdown": "<http://foo.bar/baz bim>\n",
    "expected": "<p>&lt;http://foo.bar/baz bim&gt;</p>\n",
    "actual": "<p>&lt;<a href=\"http://foo.bar/baz\">http://foo.bar/baz</a> bim&gt;</p>\n"
  },
  {
    "section": "Autolinks",
    "testno": 604,
    "markdown": "< http://foo.bar >\n",
    "expected": "<p>&lt; http://foo.bar &gt;</p>\n",
    "actual": "<p>&lt; <a href=\"http://foo.bar\">http://foo.bar</a> &gt;</p>\n"
  },
  {
    "section": "Autolinks",
    "testno": 607,
    "markdown": "http://example.com\n",
    "expected": "<p>http://example.com</p>\n",
    "actual": "<p><a href=\"http://example.com\">http://example.com</a></p>\n"
  },
  {
    "section": "Autolinks",
    "testno": 608,
    "markdown": "foo@bar.example.com\n",
    "expected": "<p>foo@bar.example.com</p>\n",
    "actual": "<p><a href=\"mailto:&#102;&#x6f;&#111;&#64;&#x62;&#97;&#x72;&#x2e;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;\">&#102;&#x6f;&#111;&#64;&#x62;&#97;&#x72;&#x2e;&#101;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#109;</a></p>\n"
  },
  {
    "section": "Raw HTML",
    "testno": 622,
    "markdown": "foo <!-- not a comment -- two hyphens -->\n",
    "expected": "<p>foo &lt;!-- not a comment -- two hyphens --&gt;</p>\n",
    "actual": "<p>foo <!-- not a comment -- two hyphens --></p>\n"
  },
  {
    "section": "Raw HTML",
    "testno": 623,
    "markdown": "foo <!--> foo -->\n\nfoo <!-- foo--->\n",
    "expected": "<p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo &lt;!-- foo---&gt;</p>\n",
    "actual": "<p>foo &lt;!--&gt; foo --&gt;</p>\n<p>foo <!-- foo---></p>\n"
  },
  {
    "section": "[extension] Disallowed Raw HTML",
    "testno": 673,
    "markdown": "<strong> <title> <style> <em>\n\n<blockquote>\n  <xmp> is disallowed.  <XMP> is also disallowed.\n</blockquote>",
    "expected": "<p><strong> &lt;title> &lt;style> <em></p>\n<blockquote>\n  &lt;xmp> is disallowed.  &lt;XMP> is also disallowed.\n</blockquote>",
    "actual": "<p><strong> <title> <style> <em></p>\n<blockquote>\n  <xmp> is disallowed.  <XMP> is also disallowed.\n</blockquote>"
  },
  {
    "section": "",
    "testno": 681,
    "markdown": "A\nB\n",
    "expected": "<p>A<br>B</p>\n",
    "actual": "<p>A\nB</p>\n"
  },
  {
    "section": "",
    "testno": 699,
    "markdown": " abc | def\n --- | ---\n bar | foo\n baz | boo\n# title\n",
    "expected": "<table>\n  <thead>\n    <tr>\n      <th>abc</th>\n      <th>def</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>bar</td>\n      <td>foo</td>\n    </tr>\n    <tr>\n      <td>baz</td>\n      <td>boo</td>\n    </tr>\n  </tbody>\n</table>\n<h1 id=\"title\">title</h1>\n",
    "actual": "<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bar</td>\n<td>foo</td>\n</tr>\n<tr>\n<td>baz</td>\n<td>boo</td>\n</tr>\n</tbody></table>\n<h1>title</h1>\n"
  },
  {
    "section": "",
    "testno": 700,
    "markdown": "| abc | def |\n| --- | --- |\n| bar | foo |\n| baz | boo |\n# title\n",
    "expected": "<table>\n  <thead>\n    <tr>\n      <th>abc</th>\n      <th>def</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>bar</td>\n      <td>foo</td>\n    </tr>\n    <tr>\n      <td>baz</td>\n      <td>boo</td>\n    </tr>\n  </tbody>\n</table>\n<h1 id=\"title\">title</h1>\n",
    "actual": "<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bar</td>\n<td>foo</td>\n</tr>\n<tr>\n<td>baz</td>\n<td>boo</td>\n</tr>\n</tbody></table>\n<h1>title</h1>\n"
  },
  {
    "section": "",
    "testno": 701,
    "markdown": "### Heading with <em>html</em>\n\n### Heading with a [link](http://github.com/)\n\n### Heading with some _italic text_\n\n### Or some **strong**\n(which doesn't really make any difference, here)\n\n### Or even `code`\n\n### What about ~~strikethrough~~\n\n## And a ref [link][destination]\n\n[destination]: /some/url \"link to nowhere\"\n",
    "expected": "<h3 id=\"heading-with-html\">Heading with <em>html</em></h3>\n\n<h3 id=\"heading-with-a-link\">Heading with a <a href=\"http://github.com/\">link</a></h3>\n\n<h3 id=\"heading-with-some-italic-text\">Heading with some <em>italic text</em></h3>\n\n<h3 id=\"or-some-strong\">Or some <strong>strong</strong></h3>\n\n<p>(which doesn&#39;t really make any difference, here)</p>\n\n<h3 id=\"or-even-code\">Or even <code>code</code></h3>\n\n<h3 id=\"what-about-strikethrough\">What about <del>strikethrough</del></h3>\n\n<h2 id=\"and-a-ref-link\">And a ref <a href=\"/some/url\" title=\"link to nowhere\">link</a></h2>\n",
    "actual": "<h3>Heading with <em>html</em></h3>\n<h3>Heading with a <a href=\"http://github.com/\">link</a></h3>\n<h3>Heading with some <em>italic text</em></h3>\n<h3>Or some <strong>strong</strong></h3>\n<p>(which doesn&#39;t really make any difference, here)</p>\n<h3>Or even <code>code</code></h3>\n<h3>What about <del>strikethrough</del></h3>\n<h2>And a ref <a href=\"/some/url\" title=\"link to nowhere\">link</a></h2>\n"
  },
  {
    "section": "",
    "testno": 705,
    "markdown": "### Example 1\n\n<!-- comment -->\n\n### Example 2\n\n<!---->\n\n### Example 3\n\n<!-- -->\n\n### Example 4\n\n<!-- - -->\n\n### Example 5\n\n<!-- -- -->\n\n### Example 6\n\n<!-- --->\n\n### Example 7\n\n<!----->\n\n### Example 8\n\n<!------>\n\n### Example 9\n\n<!-- My favorite operators are > and <!-->\n\n### Example 10\n\n<!-- multi\nline\t\ncomment\n-->\n\n### Example 11\n\n   <!-- indented comment -->\n\n    <!-- too much indentation -->\n\n### Example 12\n\n<!--> not a comment -->\n\n<!---> not a comment -->\n\n<!-- <!-- not a comment? --> -->\n\n### Example 13\n\n<!-- block ends at the end of the document since --!>\n\n*is not a valid comment ending*\n",
    "expected": "<h3 id=\"example-1\">Example 1</h3>\n\n<!-- comment -->\n\n<h3 id=\"example-2\">Example 2</h3>\n\n<!---->\n\n<h3 id=\"example-3\">Example 3</h3>\n\n<!-- -->\n\n<h3 id=\"example-4\">Example 4</h3>\n\n<!-- - -->\n\n<h3 id=\"example-5\">Example 5</h3>\n\n<!-- -- -->\n\n<h3 id=\"example-6\">Example 6</h3>\n\n<!-- --->\n\n<h3 id=\"example-7\">Example 7</h3>\n\n<!----->\n\n<h3 id=\"example-8\">Example 8</h3>\n\n<!------>\n\n<h3 id=\"example-9\">Example 9</h3>\n\n<!-- My favorite operators are > and <!-->\n\n<h3 id=\"example-10\">Example 10</h3>\n\n<!-- multi\nline    \ncomment\n-->\n\n<h3 id=\"example-11\">Example 11</h3>\n\n   <!-- indented comment -->\n\n<pre><code>&lt;!-- too much indentation --&gt;\n</code></pre>\n\n<h3 id=\"example-12\">Example 12</h3>\n\n<p>&lt;!--&gt; not a comment --&gt;</p>\n\n<p>&lt;!---&gt; not a comment --&gt;</p>\n\n<!-- <!-- not a comment? --> -->\n\n<h3 id=\"example-13\">Example 13</h3>\n\n<!-- block ends at the end of the document since --!>\n\n*is not a valid comment ending*\n",
    "actual": "<h3>Example 1</h3>\n<!-- comment -->\n\n<h3>Example 2</h3>\n<!---->\n\n<h3>Example 3</h3>\n<!-- -->\n\n<h3>Example 4</h3>\n<!-- - -->\n\n<h3>Example 5</h3>\n<!-- -- -->\n\n<h3>Example 6</h3>\n<!-- --->\n\n<h3>Example 7</h3>\n<!----->\n\n<h3>Example 8</h3>\n<!------>\n\n<h3>Example 9</h3>\n<!-- My favorite operators are > and <!-->\n\n<h3>Example 10</h3>\n<!-- multi\nline    \ncomment\n-->\n\n<h3>Example 11</h3>\n   <!-- indented comment -->\n\n<pre><code>&lt;!-- too much indentation --&gt;</code></pre>\n<h3>Example 12</h3>\n<p>&lt;!--&gt; not a comment --&gt;</p>\n<p>&lt;!---&gt; not a comment --&gt;</p>\n<!-- <!-- not a comment? --> -->\n\n<h3>Example 13</h3>\n<!-- block ends at the end of the document since --!>\n\n*is not a valid comment ending*\n"
  },
  {
    "section": "",
    "testno": 711,
    "markdown": "![Image](javascript:alert)\n\n![Image](vbscript:alert)\n\n![Image](javascript&colon;alert&#40;1&#41;)\n\n![Image](javascript&#58document;alert&#40;1&#41;)\n\n![Image](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\n",
    "expected": "<p>Image</p>\n<p>Image</p>\n<p>Image</p>\n<p>Image</p>\n<p>Image</p>\n",
    "actual": "<p><img src=\"javascript:alert\" alt=\"Image\"></p>\n<p><img src=\"vbscript:alert\" alt=\"Image\"></p>\n<p><img src=\"javascript&colon;alert&#40;1&#41;\" alt=\"Image\"></p>\n<p><img src=\"javascript&#58document;alert&#40;1&#41;\" alt=\"Image\"></p>\n<p><img src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\" alt=\"Image\"></p>\n"
  },
  {
    "section": "",
    "testno": 728,
    "markdown": "[test]: http://google.com/ \"Google\"\n\n# A heading\n\nJust a note, I've found that I can't test my markdown parser vs others.\nFor example, both markdown.js and showdown code blocks in lists wrong. They're\nalso completely [inconsistent][test] with regards to paragraphs in list items.\n\nA link. Not anymore.\n\n<aside>This will make me fail the test because\nmarkdown.js doesnt acknowledge arbitrary html blocks =/</aside>\n\n* List Item 1\n\n* List Item 2\n  * New List Item 1\n    Hi, this is a list item.\n  * New List Item 2\n    Another item\n        Code goes here.\n        Lots of it...\n  * New List Item 3\n    The last item\n\n* List Item 3\nThe final item.\n\n* List Item 4\nThe real final item.\n\nParagraph.\n\n> * bq Item 1\n> * bq Item 2\n>   * New bq Item 1\n>   * New bq Item 2\n>   Text here\n\n* * *\n\n> Another blockquote!\n> I really need to get\n> more creative with\n> mockup text..\n> markdown.js breaks here again\n\nAnother Heading\n-------------\n\nHello *world*. Here is a [link](//hello).\nAnd an image ![alt](src).\n\n    Code goes here.\n    Lots of it...\n",
    "expected": "<h1 id=\"a-heading\">A heading</h1> <p>Just a note, I&#39;ve found that I can&#39;t test my markdown parser vs others. For example, both markdown.js and showdown code blocks in lists wrong. They&#39;re  also completely <a href=\"http://google.com/\" title=\"Google\">inconsistent</a> with regards to paragraphs in list items.</p> <p>A link. Not anymore.</p> <aside>This will make me fail the test because\nmarkdown.js doesnt acknowledge arbitrary html blocks =/</aside> <ul><li><p>List Item 1</p></li><li><p>List Item 2 </p><ul><li>New List Item 1 Hi, this is a list item.</li><li>New List Item 2 Another item <pre><code>Code goes here.\nLots of it...</code></pre></li><li>New List Item 3 The last item</li></ul></li><li><p>List Item 3 The final item.</p></li><li><p>List Item 4 The real final item.</p></li></ul> <p>Paragraph.</p> <blockquote><ul><li>bq Item 1</li><li>bq Item 2 <ul><li>New bq Item 1</li><li>New bq Item 2 Text here</li></ul></li></ul></blockquote> <hr> <blockquote><p> Another blockquote!  I really need to get  more creative with  mockup text..  markdown.js breaks here again</p></blockquote> <h2 id=\"another-heading\">Another Heading</h2> <p>Hello <em>world</em>. Here is a <a href=\"//hello\">link</a>. And an image <img src=\"src\" alt=\"alt\">.</p> <pre><code>Code goes here.\nLots of it...</code></pre>\n",
    "actual": "<h1>A heading</h1>\n<p>Just a note, I&#39;ve found that I can&#39;t test my markdown parser vs others.\nFor example, both markdown.js and showdown code blocks in lists wrong. They&#39;re\nalso completely <a href=\"http://google.com/\" title=\"Google\">inconsistent</a> with regards to paragraphs in list items.</p>\n<p>A link. Not anymore.</p>\n<aside>This will make me fail the test because\nmarkdown.js doesnt acknowledge arbitrary html blocks =/</aside>\n\n<ul>\n<li><p>List Item 1</p>\n</li>\n<li><p>List Item 2</p>\n<ul>\n<li>New List Item 1\nHi, this is a list item.</li>\n<li>New List Item 2\nAnother item<pre><code>Code goes here.\nLots of it...</code></pre>\n</li>\n<li>New List Item 3\nThe last item</li>\n</ul>\n</li>\n<li><p>List Item 3\nThe final item.</p>\n</li>\n<li><p>List Item 4\nThe real final item.</p>\n</li>\n</ul>\n<p>Paragraph.</p>\n<blockquote>\n<ul>\n<li>bq Item 1</li>\n<li>bq Item 2<ul>\n<li>New bq Item 1</li>\n<li>New bq Item 2\nText here</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<p>Another blockquote!\nI really need to get\nmore creative with\nmockup text..\nmarkdown.js breaks here again</p>\n</blockquote>\n<h2>Another Heading</h2>\n<p>Hello <em>world</em>. Here is a <a href=\"//hello\">link</a>.\nAnd an image <img src=\"src\" alt=\"alt\">.</p>\n<pre><code>Code goes here.\nLots of it...</code></pre>\n"
  },
  {
    "section": "",
    "testno": 733,
    "markdown": "#header\n\n# header1\n\n#  header2\n",
    "expected": "<h1 id=\"header\">header</h1>\n\n<h1 id=\"header1\">header1</h1>\n\n<h1 id=\"header2\">header2</h1>\n",
    "actual": "<p>#header</p>\n<h1>header1</h1>\n<h1>header2</h1>\n"
  },
  {
    "section": "",
    "testno": 735,
    "markdown": "paragraph before head with hash\n#how are you\n\nparagraph before head with equals\nhow are you again\n===========\n",
    "expected": "<p>paragraph before head with hash</p>\n<h1 id=\"how-are-you\">how are you</h1>\n\n<p>paragraph before head with equals</p>\n<h1 id=\"how-are-you-again\">how are you again</h1>\n",
    "actual": "<p>paragraph before head with hash\n#how are you</p>\n<p>paragraph before head with equals\nhow are you again\n===========</p>\n"
  },
  {
    "section": "",
    "testno": 737,
    "markdown": "# Absolutization of RFC 3986 URIs\n\n## Absolute URI\n[![section 4.3](http://example.com/logo)](http://example.com/)\n\n## Network-path reference\n[![section 4.2](//example.com/logo)](//example.com/)\n\n## Absolute path\n[![section 4.2](/path/to/img)](/path/to/content)\n\n## Relative path\n[![section 4.2](img)](content)\n\n## Dot-relative path\n[![section 3.3](./img)](./content)\n\n[![section 3.3](../img)](../content)\n\n## Same-document query\n[![section 4.4](?type=image)](?)\n\n## Same-document fragment\n[![section 4.4](#img)](#)\n\n## Empty\n[section 4.2]()\n",
    "expected": "<h1 id=\"absolutization-of-rfc-3986-uris\">Absolutization of RFC 3986 URIs</h1>\n\n<h2 id=\"absolute-uri\">Absolute URI</h2>\n\n<p><a href=\"http://example.com/\"><img src=\"http://example.com/logo\" alt=\"section 4.3\"></a></p>\n\n<h2 id=\"network-path-reference\">Network-path reference</h2>\n\n<p><a href=\"//example.com/\"><img src=\"//example.com/logo\" alt=\"section 4.2\"></a></p>\n\n<h2 id=\"absolute-path\">Absolute path</h2>\n\n<p><a href=\"/path/to/content\"><img src=\"/path/to/img\" alt=\"section 4.2\"></a></p>\n\n<h2 id=\"relative-path\">Relative path</h2>\n\n<p><a href=\"/base/content\"><img src=\"/base/img\" alt=\"section 4.2\"></a></p>\n\n<h2 id=\"dot-relative-path\">Dot-relative path</h2>\n\n<p><a href=\"/base/./content\"><img src=\"/base/./img\" alt=\"section 3.3\"></a></p>\n\n<p><a href=\"/base/../content\"><img src=\"/base/../img\" alt=\"section 3.3\"></a></p>\n\n<h2 id=\"same-document-query\">Same-document query</h2>\n\n<p><a href=\"?\"><img src=\"?type=image\" alt=\"section 4.4\"></a></p>\n\n<h2 id=\"same-document-fragment\">Same-document fragment</h2>\n\n<p><a href=\"#\"><img src=\"#img\" alt=\"section 4.4\"></a></p>\n\n<h2 id=\"empty\">Empty</h2>\n\n<p><a href=\"\">section 4.2</a></p>\n",
    "actual": "<h1>Absolutization of RFC 3986 URIs</h1>\n<h2>Absolute URI</h2>\n<p><a href=\"http://example.com/\"><img src=\"http://example.com/logo\" alt=\"section 4.3\"></a></p>\n<h2>Network-path reference</h2>\n<p><a href=\"//example.com/\"><img src=\"//example.com/logo\" alt=\"section 4.2\"></a></p>\n<h2>Absolute path</h2>\n<p><a href=\"/path/to/content\"><img src=\"/path/to/img\" alt=\"section 4.2\"></a></p>\n<h2>Relative path</h2>\n<p><a href=\"content\"><img src=\"img\" alt=\"section 4.2\"></a></p>\n<h2>Dot-relative path</h2>\n<p><a href=\"./content\"><img src=\"./img\" alt=\"section 3.3\"></a></p>\n<p><a href=\"../content\"><img src=\"../img\" alt=\"section 3.3\"></a></p>\n<h2>Same-document query</h2>\n<p><a href=\"?\"><img src=\"?type=image\" alt=\"section 4.4\"></a></p>\n<h2>Same-document fragment</h2>\n<p><a href=\"#\"><img src=\"#img\" alt=\"section 4.4\"></a></p>\n<h2>Empty</h2>\n<p><a href=\"\">section 4.2</a></p>\n"
  },
  {
    "section": "",
    "testno": 738,
    "markdown": "# Absolutization of RFC 3986 URIs\n\n## Absolute URI\n[![section 4.3](http://example.com/logo)](http://example.com/)\n\n## Network-path reference\n[![section 4.2](//example.com/logo)](//example.com/)\n\n## Absolute path\n[![section 4.2](/path/to/img)](/path/to/content)\n\n## Relative path\n[![section 4.2](img)](content)\n\n## Dot-relative path\n[![section 3.3](./img)](./content)\n\n[![section 3.3](../img)](../content)\n\n## Same-document query\n[![section 4.4](?type=image)](?)\n\n## Same-document fragment\n[![section 4.4](#img)](#)\n\n## Empty\n[section 4.2]()\n",
    "expected": "<h1 id=\"absolutization-of-rfc-3986-uris\">Absolutization of RFC 3986 URIs</h1>\n\n<h2 id=\"absolute-uri\">Absolute URI</h2>\n\n<p><a href=\"http://example.com/\"><img src=\"http://example.com/logo\" alt=\"section 4.3\"></a></p>\n\n<h2 id=\"network-path-reference\">Network-path reference</h2>\n\n<p><a href=\"http://example.com/\"><img src=\"http://example.com/logo\" alt=\"section 4.2\"></a></p>\n\n<h2 id=\"absolute-path\">Absolute path</h2>\n\n<p><a href=\"http://example.com/path/to/content\"><img src=\"http://example.com/path/to/img\" alt=\"section 4.2\"></a></p>\n\n<h2 id=\"relative-path\">Relative path</h2>\n\n<p><a href=\"http://example.com/base/content\"><img src=\"http://example.com/base/img\" alt=\"section 4.2\"></a></p>\n\n<h2 id=\"dot-relative-path\">Dot-relative path</h2>\n\n<p><a href=\"http://example.com/base/./content\"><img src=\"http://example.com/base/./img\" alt=\"section 3.3\"></a></p>\n\n<p><a href=\"http://example.com/base/../content\"><img src=\"http://example.com/base/../img\" alt=\"section 3.3\"></a></p>\n\n<h2 id=\"same-document-query\">Same-document query</h2>\n\n<p><a href=\"?\"><img src=\"?type=image\" alt=\"section 4.4\"></a></p>\n\n<h2 id=\"same-document-fragment\">Same-document fragment</h2>\n\n<p><a href=\"#\"><img src=\"#img\" alt=\"section 4.4\"></a></p>\n\n<h2 id=\"empty\">Empty</h2>\n\n<p><a href=\"\">section 4.2</a></p>\n",
    "actual": "<h1>Absolutization of RFC 3986 URIs</h1>\n<h2>Absolute URI</h2>\n<p><a href=\"http://example.com/\"><img src=\"http://example.com/logo\" alt=\"section 4.3\"></a></p>\n<h2>Network-path reference</h2>\n<p><a href=\"//example.com/\"><img src=\"//example.com/logo\" alt=\"section 4.2\"></a></p>\n<h2>Absolute path</h2>\n<p><a href=\"/path/to/content\"><img src=\"/path/to/img\" alt=\"section 4.2\"></a></p>\n<h2>Relative path</h2>\n<p><a href=\"content\"><img src=\"img\" alt=\"section 4.2\"></a></p>\n<h2>Dot-relative path</h2>\n<p><a href=\"./content\"><img src=\"./img\" alt=\"section 3.3\"></a></p>\n<p><a href=\"../content\"><img src=\"../img\" alt=\"section 3.3\"></a></p>\n<h2>Same-document query</h2>\n<p><a href=\"?\"><img src=\"?type=image\" alt=\"section 4.4\"></a></p>\n<h2>Same-document fragment</h2>\n<p><a href=\"#\"><img src=\"#img\" alt=\"section 4.4\"></a></p>\n<h2>Empty</h2>\n<p><a href=\"\">section 4.2</a></p>\n"
  },
  {
    "section": "",
    "testno": 740,
    "markdown": "[URL](javascript:alert)\n\n[URL](vbscript:alert)\n\n[URL](javascript&colon;alert&#40;1&#41;)\n\n[URL](javascript&#58document;alert&#40;1&#41;)\n\n[URL](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\n",
    "expected": "<p>URL</p>\n<p>URL</p>\n<p>URL</p>\n<p>URL</p>\n<p>URL</p>\n",
    "actual": "<p><a href=\"javascript:alert\">URL</a></p>\n<p><a href=\"vbscript:alert\">URL</a></p>\n<p><a href=\"javascript&colon;alert&#40;1&#41;\">URL</a></p>\n<p><a href=\"javascript&#58document;alert&#40;1&#41;\">URL</a></p>\n<p><a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">URL</a></p>\n"
  },
  {
    "section": "",
    "testno": 741,
    "markdown": "Hello world 'how' \"are\" you -- today...\n\n\"It's a more 'challenging' smartypants test...\"\n\n'And,' as a bonus --- \"one\nmultiline\" test!\n",
    "expected": "<p>Hello world ‘how’ “are” you – today…</p>\n\n<p>“It’s a more ‘challenging’ smartypants test…”</p>\n\n<p>‘And,’ as a bonus — “one\nmultiline” test!</p>\n",
    "actual": "<p>Hello world &#39;how&#39; &quot;are&quot; you -- today...</p>\n<p>&quot;It&#39;s a more &#39;challenging&#39; smartypants test...&quot;</p>\n<p>&#39;And,&#39; as a bonus --- &quot;one\nmultiline&quot; test!</p>\n"
  },
  {
    "section": "",
    "testno": 742,
    "markdown": "<pre>&amp;</pre>\n<code>--foo</code>\n<kbd>---foo</kbd>\n<script>--foo</script>\n\nEnsure that text such as custom tags that happen to\nbegin with the same letters as the above tags don't\nmatch and thus benefit from Smartypants-ing.\n<script-custom>--foo</script-custom>\n`--foo` <codebar --foo codebar>\n",
    "expected": "<pre>&amp;</pre>\n<p><code>--foo</code>\n<kbd>---foo</kbd></p>\n<script>--foo</script>\n\n<p>Ensure that text such as custom tags that happen to\nbegin with the same letters as the above tags don’t\nmatch and thus benefit from Smartypants-ing.</p>\n\n<p><script-custom>–foo</script-custom>\n<code>--foo</code> &lt;codebar –foo codebar&gt;</p>\n",
    "actual": "<pre>&amp;</pre>\n<p><code>--foo</code>\n<kbd>---foo</kbd></p>\n<script>--foo</script>\n\n<p>Ensure that text such as custom tags that happen to\nbegin with the same letters as the above tags don&#39;t\nmatch and thus benefit from Smartypants-ing.</p>\n<p><script-custom>--foo</script-custom>\n<code>--foo</code> &lt;codebar --foo codebar&gt;</p>\n"
  },
  {
    "section": "",
    "testno": 751,
    "markdown": "lower[click me](javascript&#x3a;...)lower\nupper[click me](javascript&#X3a;...)upper\n",
    "expected": "<p>lowerclick melower\nupperclick meupper</p>\n",
    "actual": "<p>lower<a href=\"javascript&#x3a;...\">click me</a>lower\nupper<a href=\"javascript&#X3a;...\">click me</a>upper</p>\n"
  },
  {
    "section": "",
    "testno": 752,
    "markdown": "AT&T has an ampersand in their name.\n\nAT&amp;T is another way to write it.\n\nThis & that.\n\n4 < 5.\n\n6 > 5.\n\nHere's a [link] [1] with an ampersand in the URL.\n\nHere's a link with an amersand in the link text: [AT&T] [2].\n\nHere's an inline [link](/script?foo=1&bar=2).\n\nHere's an inline [link](</script?foo=1&bar=2>).\n\n\n[1]: http://example.com/?foo=1&bar=2\n[2]: http://att.com/  \"AT&T\"\n",
    "expected": "<p>AT&amp;T has an ampersand in their name.</p>\n\n<p>AT&amp;T is another way to write it.</p>\n\n<p>This &amp; that.</p>\n\n<p>4 &lt; 5.</p>\n\n<p>6 > 5.</p>\n\n<p>Here's a <a href=\"http://example.com/?foo=1&amp;bar=2\">link</a> with an ampersand in the URL.</p>\n\n<p>Here's a link with an amersand in the link text: <a href=\"http://att.com/\" title=\"AT&amp;T\">AT&amp;T</a>.</p>\n\n<p>Here's an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>\n\n<p>Here's an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>\n",
    "actual": "<p>AT&amp;T has an ampersand in their name.</p>\n<p>AT&amp;T is another way to write it.</p>\n<p>This &amp; that.</p>\n<p>4 &lt; 5.</p>\n<p>6 &gt; 5.</p>\n<p>Here&#39;s a [link] <a href=\"http://example.com/?foo=1&amp;bar=2\">1</a> with an ampersand in the URL.</p>\n<p>Here&#39;s a link with an amersand in the link text: [AT&amp;T] <a href=\"http://att.com/\" title=\"AT&amp;T\">2</a>.</p>\n<p>Here&#39;s an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>\n<p>Here&#39;s an inline <a href=\"/script?foo=1&amp;bar=2\">link</a>.</p>\n"
  },
  {
    "section": "",
    "testno": 758,
    "markdown": "In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.\n\nHere's one with a bullet.\n* criminey.\n",
    "expected": "<p>In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.</p>\n\n<p>Here's one with a bullet.\n* criminey.</p>\n",
    "actual": "<p>In Markdown 1.0.0 and earlier. Version\n8. This line turns into a list item.\nBecause a hard-wrapped line in the\nmiddle of a paragraph looked like a\nlist item.</p>\n<p>Here&#39;s one with a bullet.</p>\n<ul>\n<li>criminey.</li>\n</ul>\n"
  },
  {
    "section": "",
    "testno": 763,
    "markdown": "Just a [URL](/url/).\n\n[URL and title](/url/ \"title\").\n\n[URL and title](/url/  \"title preceded by two spaces\").\n\n[URL and title](/url/\t\"title preceded by a tab\").\n\n[URL and title](/url/ \"title has spaces afterward\"  ).\n\n[URL and title]( /url/has space ).\n\n[URL and title]( /url/has space/ \"url has space and title\").\n\n[Empty]().\n",
    "expected": "<p>Just a <a href=\"/url/\">URL</a>.</p>\n\n<p><a href=\"/url/\" title=\"title\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title preceded by two spaces\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title preceded by a tab\">URL and title</a>.</p>\n\n<p><a href=\"/url/\" title=\"title has spaces afterward\">URL and title</a>.</p>\n\n<p><a href=\"/url/has%20space\">URL and title</a>.</p>\n\n<p><a href=\"/url/has%20space/\" title=\"url has space and title\">URL and title</a>.</p>\n\n<p><a href=\"\">Empty</a>.</p>\n",
    "actual": "<p>Just a <a href=\"/url/\">URL</a>.</p>\n<p><a href=\"/url/\" title=\"title\">URL and title</a>.</p>\n<p><a href=\"/url/\" title=\"title preceded by two spaces\">URL and title</a>.</p>\n<p><a href=\"/url/\" title=\"title preceded by a tab\">URL and title</a>.</p>\n<p><a href=\"/url/\" title=\"title has spaces afterward\">URL and title</a>.</p>\n<p>[URL and title]( /url/has space ).</p>\n<p>[URL and title]( /url/has space/ &quot;url has space and title&quot;).</p>\n<p><a href=\"\">Empty</a>.</p>\n"
  },
  {
    "section": "",
    "testno": 764,
    "markdown": "Foo [bar] [1].\n\nFoo [bar][1].\n\nFoo [bar]\n[1].\n\n[1]: /url/  \"Title\"\n\n\nWith [embedded [brackets]] [b].\n\n\nIndented [once][].\n\nIndented [twice][].\n\nIndented [thrice][].\n\nIndented [four][] times.\n\n [once]: /url\n\n  [twice]: /url\n\n   [thrice]: /url\n\n    [four]: /url\n\n\n[b]: /url/\n\n* * *\n\n[this] [this] should work\n\nSo should [this][this].\n\nAnd [this] [].\n\nAnd [this][].\n\nAnd [this].\n\nBut not [that] [].\n\nNor [that][].\n\nNor [that].\n\n[Something in brackets like [this][] should work]\n\n[Same with [this].]\n\nIn this case, [this](/somethingelse/) points to something else.\n\nBackslashing should suppress \\[this] and [this\\].\n\n[this]: foo\n\n\n* * *\n\nHere's one where the [link\nbreaks] across lines.\n\nHere's another where the [link \nbreaks] across lines, but with a line-ending space.\n\n\n[link breaks]: /url/\n",
    "expected": "<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n\n<p>With <a href=\"/url/\">embedded [brackets]</a>.</p>\n\n<p>Indented <a href=\"/url\">once</a>.</p>\n\n<p>Indented <a href=\"/url\">twice</a>.</p>\n\n<p>Indented <a href=\"/url\">thrice</a>.</p>\n\n<p>Indented [four][] times.</p>\n\n<pre><code>[four]: /url\n</code></pre>\n\n<hr />\n\n<p><a href=\"foo\">this</a> should work</p>\n\n<p>So should <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>And <a href=\"foo\">this</a>.</p>\n\n<p>But not [that] [].</p>\n\n<p>Nor [that][].</p>\n\n<p>Nor [that].</p>\n\n<p>[Something in brackets like <a href=\"foo\">this</a> should work]</p>\n\n<p>[Same with <a href=\"foo\">this</a>.]</p>\n\n<p>In this case, <a href=\"/somethingelse/\">this</a> points to something else.</p>\n\n<p>Backslashing should suppress [this] and [this].</p>\n\n<hr />\n\n<p>Here's one where the <a href=\"/url/\">link\nbreaks</a> across lines.</p>\n\n<p>Here's another where the <a href=\"/url/\">link \nbreaks</a> across lines, but with a line-ending space.</p>\n",
    "actual": "<p>Foo [bar] <a href=\"/url/\" title=\"Title\">1</a>.</p>\n<p>Foo <a href=\"/url/\" title=\"Title\">bar</a>.</p>\n<p>Foo [bar]\n<a href=\"/url/\" title=\"Title\">1</a>.</p>\n<p>With [embedded [brackets]] <a href=\"/url/\">b</a>.</p>\n<p>Indented <a href=\"/url\">once</a>.</p>\n<p>Indented <a href=\"/url\">twice</a>.</p>\n<p>Indented <a href=\"/url\">thrice</a>.</p>\n<p>Indented [four][] times.</p>\n<pre><code>[four]: /url</code></pre>\n<hr>\n<p><a href=\"foo\">this</a> <a href=\"foo\">this</a> should work</p>\n<p>So should <a href=\"foo\">this</a>.</p>\n<p>And <a href=\"foo\">this</a> [].</p>\n<p>And <a href=\"foo\">this</a>.</p>\n<p>And <a href=\"foo\">this</a>.</p>\n<p>But not [that] [].</p>\n<p>Nor [that][].</p>\n<p>Nor [that].</p>\n<p>[Something in brackets like <a href=\"foo\">this</a> should work]</p>\n<p>[Same with <a href=\"foo\">this</a>.]</p>\n<p>In this case, <a href=\"/somethingelse/\">this</a> points to something else.</p>\n<p>Backslashing should suppress [this] and [this].</p>\n<hr>\n<p>Here&#39;s one where the <a href=\"/url/\">link\nbreaks</a> across lines.</p>\n<p>Here&#39;s another where the <a href=\"/url/\">link \nbreaks</a> across lines, but with a line-ending space.</p>\n"
  },
  {
    "section": "",
    "testno": 765,
    "markdown": "This is the [simple case].\n\n[simple case]: /simple\n\n\n\nThis one has a [line\nbreak].\n\nThis one has a [line \nbreak] with a line-ending space.\n\n[line break]: /foo\n\n\n[this] [that] and the [other]\n\n[this]: /this\n[that]: /that\n[other]: /other\n",
    "expected": "<p>This is the <a href=\"/simple\">simple case</a>.</p>\n\n<p>This one has a <a href=\"/foo\">line\nbreak</a>.</p>\n\n<p>This one has a <a href=\"/foo\">line \nbreak</a> with a line-ending space.</p>\n\n<p><a href=\"/that\">this</a> and the <a href=\"/other\">other</a></p>\n",
    "actual": "<p>This is the <a href=\"/simple\">simple case</a>.</p>\n<p>This one has a <a href=\"/foo\">line\nbreak</a>.</p>\n<p>This one has a <a href=\"/foo\">line \nbreak</a> with a line-ending space.</p>\n<p><a href=\"/this\">this</a> <a href=\"/that\">that</a> and the <a href=\"/other\">other</a></p>\n"
  },
  {
    "section": "",
    "testno": 766,
    "markdown": "Foo [bar][].\n\nFoo [bar](/url/ \"Title with \"quotes\" inside\").\n\n\n  [bar]: /url/ \"Title with \"quotes\" inside\"\n\n",
    "expected": "<p>Foo <a href=\"/url/\" title=\"Title with &quot;quotes&quot; inside\">bar</a>.</p>\n\n<p>Foo <a href=\"/url/\" title=\"Title with &quot;quotes&quot; inside\">bar</a>.</p>\n",
    "actual": "<p>Foo [bar][].</p>\n<p>Foo [bar](/url/ &quot;Title with &quot;quotes&quot; inside&quot;).</p>\n<p>  [bar]: /url/ &quot;Title with &quot;quotes&quot; inside&quot;</p>\n"
  },
  {
    "section": "",
    "testno": 767,
    "markdown": "Markdown: Basics\n================\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\nGetting the Gist of Markdown's Formatting Syntax\n------------------------------------------------\n\nThis page offers a brief overview of what it's like to use Markdown.\nThe [syntax page] [s] provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.\n\nIt's also helpful to simply try Markdown out; the [Dingus] [d] is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL] [src].\n\n  [s]: /projects/markdown/syntax  \"Markdown Syntax\"\n  [d]: /projects/markdown/dingus  \"Markdown Dingus\"\n  [src]: /projects/markdown/basics.text\n\n\n## Paragraphs, Headers, Blockquotes ##\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.\n\nMarkdown offers two styles of headers: *Setext* and *atx*.\nSetext-style headers for `<h1>` and `<h2>` are created by\n\"underlining\" with equal signs (`=`) and hyphens (`-`), respectively.\nTo create an atx-style header, you put 1-6 hash marks (`#`) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.\n\nBlockquotes are indicated using email-style '`>`' angle brackets.\n\nMarkdown:\n\n    A First Level Header\n    ====================\n    \n    A Second Level Header\n    ---------------------\n\n    Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.\n\n    The quick brown fox jumped over the lazy\n    dog's back.\n    \n    ### Header 3\n\n    > This is a blockquote.\n    > \n    > This is the second paragraph in the blockquote.\n    >\n    > ## This is an H2 in a blockquote\n\n\nOutput:\n\n    <h1>A First Level Header</h1>\n    \n    <h2>A Second Level Header</h2>\n    \n    <p>Now is the time for all good men to come to\n    the aid of their country. This is just a\n    regular paragraph.</p>\n    \n    <p>The quick brown fox jumped over the lazy\n    dog's back.</p>\n    \n    <h3>Header 3</h3>\n    \n    <blockquote>\n        <p>This is a blockquote.</p>\n        \n        <p>This is the second paragraph in the blockquote.</p>\n        \n        <h2>This is an H2 in a blockquote</h2>\n    </blockquote>\n\n\n\n### Phrase Emphasis ###\n\nMarkdown uses asterisks and underscores to indicate spans of emphasis.\n\nMarkdown:\n\n    Some of these words *are emphasized*.\n    Some of these words _are emphasized also_.\n    \n    Use two asterisks for **strong emphasis**.\n    Or, if you prefer, __use two underscores instead__.\n\nOutput:\n\n    <p>Some of these words <em>are emphasized</em>.\n    Some of these words <em>are emphasized also</em>.</p>\n    \n    <p>Use two asterisks for <strong>strong emphasis</strong>.\n    Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n   \n\n\n## Lists ##\n\nUnordered (bulleted) lists use asterisks, pluses, and hyphens (`*`,\n`+`, and `-`) as list markers. These three markers are\ninterchangable; this:\n\n    *   Candy.\n    *   Gum.\n    *   Booze.\n\nthis:\n\n    +   Candy.\n    +   Gum.\n    +   Booze.\n\nand this:\n\n    -   Candy.\n    -   Gum.\n    -   Booze.\n\nall produce the same output:\n\n    <ul>\n    <li>Candy.</li>\n    <li>Gum.</li>\n    <li>Booze.</li>\n    </ul>\n\nOrdered (numbered) lists use regular numbers, followed by periods, as\nlist markers:\n\n    1.  Red\n    2.  Green\n    3.  Blue\n\nOutput:\n\n    <ol>\n    <li>Red</li>\n    <li>Green</li>\n    <li>Blue</li>\n    </ol>\n\nIf you put blank lines between items, you'll get `<p>` tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:\n\n    *   A list item.\n    \n        With multiple paragraphs.\n\n    *   Another item in the list.\n\nOutput:\n\n    <ul>\n    <li><p>A list item.</p>\n    <p>With multiple paragraphs.</p></li>\n    <li><p>Another item in the list.</p></li>\n    </ul>\n    \n\n\n### Links ###\n\nMarkdown supports two styles for creating links: *inline* and\n*reference*. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.\n\nInline-style links use parentheses immediately after the link text.\nFor example:\n\n    This is an [example link](http://example.com/).\n\nOutput:\n\n    <p>This is an <a href=\"http://example.com/\">\n    example link</a>.</p>\n\nOptionally, you may include a title attribute in the parentheses:\n\n    This is an [example link](http://example.com/ \"With a Title\").\n\nOutput:\n\n    <p>This is an <a href=\"http://example.com/\" title=\"With a Title\">\n    example link</a>.</p>\n\nReference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:\n\n    I get 10 times more traffic from [Google][1] than from\n    [Yahoo][2] or [MSN][3].\n\n    [1]: http://google.com/        \"Google\"\n    [2]: http://search.yahoo.com/  \"Yahoo Search\"\n    [3]: http://search.msn.com/    \"MSN Search\"\n\nOutput:\n\n    <p>I get 10 times more traffic from <a href=\"http://google.com/\"\n    title=\"Google\">Google</a> than from <a href=\"http://search.yahoo.com/\"\n    title=\"Yahoo Search\">Yahoo</a> or <a href=\"http://search.msn.com/\"\n    title=\"MSN Search\">MSN</a>.</p>\n\nThe title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are *not* case sensitive:\n\n    I start my morning with a cup of coffee and\n    [The New York Times][NY Times].\n\n    [ny times]: http://www.nytimes.com/\n\nOutput:\n\n    <p>I start my morning with a cup of coffee and\n    <a href=\"http://www.nytimes.com/\">The New York Times</a>.</p>\n\n\n### Images ###\n\nImage syntax is very much like link syntax.\n\nInline (titles are optional):\n\n    ![alt text](/path/to/img.jpg \"Title\")\n\nReference-style:\n\n    ![alt text][id]\n\n    [id]: /path/to/img.jpg \"Title\"\n\nBoth of the above examples produce the same output:\n\n    <img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n\n\n\n### Code ###\n\nIn a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (`&`) and angle brackets (`<` or\n`>`) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:\n\n    I strongly recommend against using any `<blink>` tags.\n\n    I wish SmartyPants used named entities like `&mdash;`\n    instead of decimal-encoded entites like `&#8212;`.\n\nOutput:\n\n    <p>I strongly recommend against using any\n    <code>&lt;blink&gt;</code> tags.</p>\n    \n    <p>I wish SmartyPants used named entities like\n    <code>&amp;mdash;</code> instead of decimal-encoded\n    entites like <code>&amp;#8212;</code>.</p>\n\n\nTo specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, `&`, `<`,\nand `>` characters will be escaped automatically.\n\nMarkdown:\n\n    If you want your page to validate under XHTML 1.0 Strict,\n    you've got to put paragraph tags in your blockquotes:\n\n        <blockquote>\n            <p>For example.</p>\n        </blockquote>\n\nOutput:\n\n    <p>If you want your page to validate under XHTML 1.0 Strict,\n    you've got to put paragraph tags in your blockquotes:</p>\n    \n    <pre><code>&lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;\n    </code></pre>\n",
    "expected": "<h1 id=\"markdown-basics\">Markdown: Basics</h1>\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n<h2 id=\"getting-the-gist-of-markdowns-formatting-syntax\">Getting the Gist of Markdown's Formatting Syntax</h2>\n\n<p>This page offers a brief overview of what it's like to use Markdown.\nThe <a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax\">syntax page</a> provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.</p>\n\n<p>It's also helpful to simply try Markdown out; the <a href=\"/projects/markdown/dingus\" title=\"Markdown Dingus\">Dingus</a> is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.</p>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/basics.text\">see the source for it by adding '.text' to the URL</a>.</p>\n\n<h2 id=\"paragraphs-headers-blockquotes\">Paragraphs, Headers, Blockquotes</h2>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>Markdown offers two styles of headers: <em>Setext</em> and <em>atx</em>.\nSetext-style headers for <code>&lt;h1&gt;</code> and <code>&lt;h2&gt;</code> are created by\n\"underlining\" with equal signs (<code>=</code>) and hyphens (<code>-</code>), respectively.\nTo create an atx-style header, you put 1-6 hash marks (<code>#</code>) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.</p>\n\n<p>Blockquotes are indicated using email-style '<code>&gt;</code>' angle brackets.</p>\n\n<p>Markdown:</p>\n\n<pre><code>A First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.\n\nThe quick brown fox jumped over the lazy\ndog's back.\n\n### Header 3\n\n&gt; This is a blockquote.\n&gt; \n&gt; This is the second paragraph in the blockquote.\n&gt;\n&gt; ## This is an H2 in a blockquote\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;\n\n&lt;h2&gt;A Second Level Header&lt;/h2&gt;\n\n&lt;p&gt;Now is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.&lt;/p&gt;\n\n&lt;p&gt;The quick brown fox jumped over the lazy\ndog's back.&lt;/p&gt;\n\n&lt;h3&gt;Header 3&lt;/h3&gt;\n\n&lt;blockquote&gt;\n    &lt;p&gt;This is a blockquote.&lt;/p&gt;\n\n    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;\n\n    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;\n&lt;/blockquote&gt;\n</code></pre>\n\n<h3 id=\"phrase-emphasis\">Phrase Emphasis</h3>\n\n<p>Markdown uses asterisks and underscores to indicate spans of emphasis.</p>\n\n<p>Markdown:</p>\n\n<pre><code>Some of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.\nSome of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.\nOr, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;\n</code></pre>\n\n<h2 id=\"lists\">Lists</h2>\n\n<p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code>*</code>,\n<code>+</code>, and <code>-</code>) as list markers. These three markers are\ninterchangable; this:</p>\n\n<pre><code>*   Candy.\n*   Gum.\n*   Booze.\n</code></pre>\n\n<p>this:</p>\n\n<pre><code>+   Candy.\n+   Gum.\n+   Booze.\n</code></pre>\n\n<p>and this:</p>\n\n<pre><code>-   Candy.\n-   Gum.\n-   Booze.\n</code></pre>\n\n<p>all produce the same output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Candy.&lt;/li&gt;\n&lt;li&gt;Gum.&lt;/li&gt;\n&lt;li&gt;Booze.&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as\nlist markers:</p>\n\n<pre><code>1.  Red\n2.  Green\n3.  Blue\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Red&lt;/li&gt;\n&lt;li&gt;Green&lt;/li&gt;\n&lt;li&gt;Blue&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>If you put blank lines between items, you'll get <code>&lt;p&gt;</code> tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:</p>\n\n<pre><code>*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;\n&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Markdown supports two styles for creating links: <em>inline</em> and\n<em>reference</em>. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.</p>\n\n<p>Inline-style links use parentheses immediately after the link text.\nFor example:</p>\n\n<pre><code>This is an [example link](http://example.com/).\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href=\"http://example.com/\"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n\n<pre><code>This is an [example link](http://example.com/ \"With a Title\").\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href=\"http://example.com/\" title=\"With a Title\"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>Reference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:</p>\n\n<pre><code>I get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        \"Google\"\n[2]: http://search.yahoo.com/  \"Yahoo Search\"\n[3]: http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=\"http://google.com/\"\ntitle=\"Google\"&gt;Google&lt;/a&gt; than from &lt;a href=\"http://search.yahoo.com/\"\ntitle=\"Yahoo Search\"&gt;Yahoo&lt;/a&gt; or &lt;a href=\"http://search.msn.com/\"\ntitle=\"MSN Search\"&gt;MSN&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>The title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are <em>not</em> case sensitive:</p>\n\n<pre><code>I start my morning with a cup of coffee and\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I start my morning with a cup of coffee and\n&lt;a href=\"http://www.nytimes.com/\"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<h3 id=\"images\">Images</h3>\n\n<p>Image syntax is very much like link syntax.</p>\n\n<p>Inline (titles are optional):</p>\n\n<pre><code>![alt text](/path/to/img.jpg \"Title\")\n</code></pre>\n\n<p>Reference-style:</p>\n\n<pre><code>![alt text][id]\n\n[id]: /path/to/img.jpg \"Title\"\n</code></pre>\n\n<p>Both of the above examples produce the same output:</p>\n\n<pre><code>&lt;img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" /&gt;\n</code></pre>\n\n<h3 id=\"code\">Code</h3>\n\n<p>In a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> or\n<code>&gt;</code>) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:</p>\n\n<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.\n\nI wish SmartyPants used named entities like `&amp;mdash;`\ninstead of decimal-encoded entites like `&amp;#8212;`.\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I strongly recommend against using any\n&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n\n&lt;p&gt;I wish SmartyPants used named entities like\n&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded\nentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>To specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, <code>&amp;</code>, <code>&lt;</code>,\nand <code>&gt;</code> characters will be escaped automatically.</p>\n\n<p>Markdown:</p>\n\n<pre><code>If you want your page to validate under XHTML 1.0 Strict,\nyou've got to put paragraph tags in your blockquotes:\n\n    &lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,\nyou've got to put paragraph tags in your blockquotes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;\n    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;\n&amp;lt;/blockquote&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n",
    "actual": "<h1>Markdown: Basics</h1>\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a class=\"selected\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\n<h2>Getting the Gist of Markdown&#39;s Formatting Syntax</h2>\n<p>This page offers a brief overview of what it&#39;s like to use Markdown.\nThe [syntax page] <a href=\"/projects/markdown/syntax\" title=\"Markdown Syntax\">s</a> provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.</p>\n<p>It&#39;s also helpful to simply try Markdown out; the [Dingus] <a href=\"/projects/markdown/dingus\" title=\"Markdown Dingus\">d</a> is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.</p>\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan [see the source for it by adding &#39;.text&#39; to the URL] <a href=\"/projects/markdown/basics.text\">src</a>.</p>\n<h2>Paragraphs, Headers, Blockquotes</h2>\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n<p>Markdown offers two styles of headers: <em>Setext</em> and <em>atx</em>.\nSetext-style headers for <code>&lt;h1&gt;</code> and <code>&lt;h2&gt;</code> are created by\n&quot;underlining&quot; with equal signs (<code>=</code>) and hyphens (<code>-</code>), respectively.\nTo create an atx-style header, you put 1-6 hash marks (<code>#</code>) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.</p>\n<p>Blockquotes are indicated using email-style &#39;<code>&gt;</code>&#39; angle brackets.</p>\n<p>Markdown:</p>\n<pre><code>A First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.\n\nThe quick brown fox jumped over the lazy\ndog&#39;s back.\n\n### Header 3\n\n&gt; This is a blockquote.\n&gt; \n&gt; This is the second paragraph in the blockquote.\n&gt;\n&gt; ## This is an H2 in a blockquote</code></pre>\n<p>Output:</p>\n<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;\n\n&lt;h2&gt;A Second Level Header&lt;/h2&gt;\n\n&lt;p&gt;Now is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.&lt;/p&gt;\n\n&lt;p&gt;The quick brown fox jumped over the lazy\ndog&#39;s back.&lt;/p&gt;\n\n&lt;h3&gt;Header 3&lt;/h3&gt;\n\n&lt;blockquote&gt;\n    &lt;p&gt;This is a blockquote.&lt;/p&gt;\n\n    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;\n\n    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;\n&lt;/blockquote&gt;</code></pre>\n<h3>Phrase Emphasis</h3>\n<p>Markdown uses asterisks and underscores to indicate spans of emphasis.</p>\n<p>Markdown:</p>\n<pre><code>Some of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.\nSome of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.\nOr, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;</code></pre>\n<h2>Lists</h2>\n<p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code>*</code>,\n<code>+</code>, and <code>-</code>) as list markers. These three markers are\ninterchangable; this:</p>\n<pre><code>*   Candy.\n*   Gum.\n*   Booze.</code></pre>\n<p>this:</p>\n<pre><code>+   Candy.\n+   Gum.\n+   Booze.</code></pre>\n<p>and this:</p>\n<pre><code>-   Candy.\n-   Gum.\n-   Booze.</code></pre>\n<p>all produce the same output:</p>\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Candy.&lt;/li&gt;\n&lt;li&gt;Gum.&lt;/li&gt;\n&lt;li&gt;Booze.&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as\nlist markers:</p>\n<pre><code>1.  Red\n2.  Green\n3.  Blue</code></pre>\n<p>Output:</p>\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Red&lt;/li&gt;\n&lt;li&gt;Green&lt;/li&gt;\n&lt;li&gt;Blue&lt;/li&gt;\n&lt;/ol&gt;</code></pre>\n<p>If you put blank lines between items, you&#39;ll get <code>&lt;p&gt;</code> tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:</p>\n<pre><code>*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.</code></pre>\n<p>Output:</p>\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;\n&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<h3>Links</h3>\n<p>Markdown supports two styles for creating links: <em>inline</em> and\n<em>reference</em>. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.</p>\n<p>Inline-style links use parentheses immediately after the link text.\nFor example:</p>\n<pre><code>This is an [example link](http://example.com/).</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot;&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;</code></pre>\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n<pre><code>This is an [example link](http://example.com/ &quot;With a Title&quot;).</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;This is an &lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;</code></pre>\n<p>Reference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:</p>\n<pre><code>I get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        &quot;Google&quot;\n[2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;\n[3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;\ntitle=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot;\ntitle=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot;\ntitle=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre>\n<p>The title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are <em>not</em> case sensitive:</p>\n<pre><code>I start my morning with a cup of coffee and\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;I start my morning with a cup of coffee and\n&lt;a href=&quot;http://www.nytimes.com/&quot;&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;</code></pre>\n<h3>Images</h3>\n<p>Image syntax is very much like link syntax.</p>\n<p>Inline (titles are optional):</p>\n<pre><code>![alt text](/path/to/img.jpg &quot;Title&quot;)</code></pre>\n<p>Reference-style:</p>\n<pre><code>![alt text][id]\n\n[id]: /path/to/img.jpg &quot;Title&quot;</code></pre>\n<p>Both of the above examples produce the same output:</p>\n<pre><code>&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&gt;</code></pre>\n<h3>Code</h3>\n<p>In a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> or\n<code>&gt;</code>) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:</p>\n<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.\n\nI wish SmartyPants used named entities like `&amp;mdash;`\ninstead of decimal-encoded entites like `&amp;#8212;`.</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;I strongly recommend against using any\n&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n\n&lt;p&gt;I wish SmartyPants used named entities like\n&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded\nentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;</code></pre>\n<p>To specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, <code>&amp;</code>, <code>&lt;</code>,\nand <code>&gt;</code> characters will be escaped automatically.</p>\n<p>Markdown:</p>\n<pre><code>If you want your page to validate under XHTML 1.0 Strict,\nyou&#39;ve got to put paragraph tags in your blockquotes:\n\n    &lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;</code></pre>\n<p>Output:</p>\n<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,\nyou&#39;ve got to put paragraph tags in your blockquotes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;\n    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;\n&amp;lt;/blockquote&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;</code></pre>\n"
  },
  {
    "section": "",
    "testno": 768,
    "markdown": "Markdown: Syntax\n================\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\n*   [Overview](#overview)\n    *   [Philosophy](#philosophy)\n    *   [Inline HTML](#html)\n    *   [Automatic Escaping for Special Characters](#autoescape)\n*   [Block Elements](#block)\n    *   [Paragraphs and Line Breaks](#p)\n    *   [Headers](#header)\n    *   [Blockquotes](#blockquote)\n    *   [Lists](#list)\n    *   [Code Blocks](#precode)\n    *   [Horizontal Rules](#hr)\n*   [Span Elements](#span)\n    *   [Links](#link)\n    *   [Emphasis](#em)\n    *   [Code](#code)\n    *   [Images](#img)\n*   [Miscellaneous](#misc)\n    *   [Backslash Escapes](#backslash)\n    *   [Automatic Links](#autolink)\n\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL][src].\n\n  [src]: /projects/markdown/syntax.text\n\n* * *\n\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\n\nReadability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including [Setext] [1], [atx] [2], [Textile] [3], [reStructuredText] [4],\n[Grutatext] [5], and [EtText] [6] -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.\n\n  [1]: http://docutils.sourceforge.net/mirror/setext.html\n  [2]: http://www.aaronsw.com/2002/atx/\n  [3]: http://textism.com/tools/textile/\n  [4]: http://docutils.sourceforge.net/rst.html\n  [5]: http://www.triptico.com/software/grutatxt.html\n  [6]: http://ettext.taint.org/doc/\n\nTo this end, Markdown's syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like \\*emphasis\\*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you've ever\nused email.\n\n\n\n<h3 id=\"html\">Inline HTML</h3>\n\nMarkdown's syntax is intended for one purpose: to be used as a\nformat for *writing* for the web.\n\nMarkdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is *not* to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a *publishing* format; Markdown is a *writing*\nformat. Thus, Markdown's formatting syntax only addresses issues that\ncan be conveyed in plain text.\n\nFor any markup that is not covered by Markdown's syntax, you simply\nuse HTML itself. There's no need to preface it or delimit it to\nindicate that you're switching from Markdown to HTML; you just use\nthe tags.\n\nThe only restrictions are that block-level HTML elements -- e.g. `<div>`,\n`<table>`, `<pre>`, `<p>`, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) `<p>` tags around HTML block-level tags.\n\nFor example, to add an HTML table to a Markdown article:\n\n    This is a regular paragraph.\n\n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n\n    This is another regular paragraph.\n\nNote that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can't use Markdown-style `*emphasis*` inside an\nHTML block.\n\nSpan-level HTML tags -- e.g. `<span>`, `<cite>`, or `<del>` -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou'd prefer to use HTML `<a>` or `<img>` tags instead of Markdown's\nlink or image syntax, go right ahead.\n\nUnlike block-level HTML tags, Markdown syntax *is* processed within\nspan-level tags.\n\n\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\nIn HTML, there are two characters that demand special treatment: `<`\nand `&`. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. `&lt;`, and\n`&amp;`.\n\nAmpersands in particular are bedeviling for web writers. If you want to\nwrite about 'AT&T', you need to write '`AT&amp;T`'. You even need to\nescape ampersands within URLs. Thus, if you want to link to:\n\n    http://images.google.com/images?num=30&q=larry+bird\n\nyou need to encode the URL as:\n\n    http://images.google.com/images?num=30&amp;q=larry+bird\n\nin your anchor tag `href` attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.\n\nMarkdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto `&amp;`.\n\nSo, if you want to include a copyright symbol in your article, you can write:\n\n    &copy;\n\nand Markdown will leave it alone. But if you write:\n\n    AT&T\n\nMarkdown will translate it to:\n\n    AT&amp;T\n\nSimilarly, because Markdown supports [inline HTML](#html), if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:\n\n    4 < 5\n\nMarkdown will translate it to:\n\n    4 &lt; 5\n\nHowever, inside Markdown code spans and blocks, angle brackets and\nampersands are *always* encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single `<`\nand `&` in your example code needs to be escaped.)\n\n\n* * *\n\n\n<h2 id=\"block\">Block Elements</h2>\n\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.\n\nThe implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a `<br />` tag.\n\nWhen you *do* want to insert a `<br />` break tag using Markdown, you\nend a line with two or more spaces, then type return.\n\nYes, this takes a tad more effort to create a `<br />`, but a simplistic\n\"every line break is a `<br />`\" rule wouldn't work for Markdown.\nMarkdown's email-style [blockquoting][bq] and multi-paragraph [list items][l]\nwork best -- and look better -- when you format them with hard breaks.\n\n  [bq]: #blockquote\n  [l]:  #list\n\n\n\n<h3 id=\"header\">Headers</h3>\n\nMarkdown supports two styles of headers, [Setext] [1] and [atx] [2].\n\nSetext-style headers are \"underlined\" using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:\n\n    This is an H1\n    =============\n\n    This is an H2\n    -------------\n\nAny number of underlining `=`'s or `-`'s will work.\n\nAtx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:\n\n    # This is an H1\n\n    ## This is an H2\n\n    ###### This is an H6\n\nOptionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :\n\n    # This is an H1 #\n\n    ## This is an H2 ##\n\n    ### This is an H3 ######\n\n\n<h3 id=\"blockquote\">Blockquotes</h3>\n\nMarkdown uses email-style `>` characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a `>` before every line:\n\n    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n    >\n    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    > id sem consectetuer libero luctus adipiscing.\n\nMarkdown allows you to be lazy and only put the `>` before the first\nline of a hard-wrapped paragraph:\n\n    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    id sem consectetuer libero luctus adipiscing.\n\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of `>`:\n\n    > This is the first level of quoting.\n    >\n    > > This is nested blockquote.\n    >\n    > Back to the first level.\n\nBlockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:\n\n\t> ## This is a header.\n\t>\n\t> 1.   This is the first list item.\n\t> 2.   This is the second list item.\n\t>\n\t> Here's some example code:\n\t>\n\t>     return shell_exec(\"echo $input | $markdown_script\");\n\nAny decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.\n\n\n<h3 id=\"list\">Lists</h3>\n\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n\nUnordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:\n\n    *   Red\n    *   Green\n    *   Blue\n\nis equivalent to:\n\n    +   Red\n    +   Green\n    +   Blue\n\nand:\n\n    -   Red\n    -   Green\n    -   Blue\n\nOrdered lists use numbers followed by periods:\n\n    1.  Bird\n    2.  McHale\n    3.  Parish\n\nIt's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:\n\n    <ol>\n    <li>Bird</li>\n    <li>McHale</li>\n    <li>Parish</li>\n    </ol>\n\nIf you instead wrote the list in Markdown like this:\n\n    1.  Bird\n    1.  McHale\n    1.  Parish\n\nor even:\n\n    3. Bird\n    1. McHale\n    8. Parish\n\nyou'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.\n\nIf you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.\n\nList markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.\n\nTo make lists look nice, you can wrap items with hanging indents:\n\n    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n        Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n        viverra nec, fringilla in, laoreet vitae, risus.\n    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n        Suspendisse id sem consectetuer libero luctus adipiscing.\n\nBut if you want to be lazy, you don't have to:\n\n    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIf list items are separated by blank lines, Markdown will wrap the\nitems in `<p>` tags in the HTML output. For example, this input:\n\n    *   Bird\n    *   Magic\n\nwill turn into:\n\n    <ul>\n    <li>Bird</li>\n    <li>Magic</li>\n    </ul>\n\nBut this:\n\n    *   Bird\n\n    *   Magic\n\nwill turn into:\n\n    <ul>\n    <li><p>Bird</p></li>\n    <li><p>Magic</p></li>\n    </ul>\n\nList items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:\n\n    1.  This is a list item with two paragraphs. Lorem ipsum dolor\n        sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n        mi posuere lectus.\n\n        Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n        vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n        sit amet velit.\n\n    2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIt looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:\n\n    *   This is a list item with two paragraphs.\n\n        This is the second paragraph in the list item. You're\n    only required to indent the first line. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit.\n\n    *   Another item in the same list.\n\nTo put a blockquote within a list item, the blockquote's `>`\ndelimiters need to be indented:\n\n    *   A list item with a blockquote:\n\n        > This is a blockquote\n        > inside a list item.\n\nTo put a code block within a list item, the code block needs\nto be indented *twice* -- 8 spaces or two tabs:\n\n    *   A list item with a code block:\n\n            <code goes here>\n\n\nIt's worth noting that it's possible to trigger an ordered list by\naccident, by writing something like this:\n\n    1986. What a great season.\n\nIn other words, a *number-period-space* sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:\n\n    1986\\. What a great season.\n\n\n\n<h3 id=\"precode\">Code Blocks</h3>\n\nPre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both `<pre>` and `<code>` tags.\n\nTo produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:\n\n    This is a normal paragraph:\n\n        This is a code block.\n\nMarkdown will generate:\n\n    <p>This is a normal paragraph:</p>\n\n    <pre><code>This is a code block.\n    </code></pre>\n\nOne level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:\n\n    Here is an example of AppleScript:\n\n        tell application \"Foo\"\n            beep\n        end tell\n\nwill turn into:\n\n    <p>Here is an example of AppleScript:</p>\n\n    <pre><code>tell application \"Foo\"\n        beep\n    end tell\n    </code></pre>\n\nA code block continues until it reaches a line that is not indented\n(or the end of the article).\n\nWithin a code block, ampersands (`&`) and angle brackets (`<` and `>`)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:\n\n        <div class=\"footer\">\n            &copy; 2004 Foo Corporation\n        </div>\n\nwill turn into:\n\n    <pre><code>&lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n    </code></pre>\n\nRegular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.\n\n\n\n<h3 id=\"hr\">Horizontal Rules</h3>\n\nYou can produce a horizontal rule tag (`<hr />`) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:\n\n    * * *\n\n    ***\n\n    *****\n\n    - - -\n\n    ---------------------------------------\n\n\t_ _ _\n\n\n* * *\n\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\nMarkdown supports two style of links: *inline* and *reference*.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an *optional*\ntitle for the link, surrounded in quotes. For example:\n\n    This is [an example](http://example.com/ \"Title\") inline link.\n\n    [This link](http://example.net/) has no title attribute.\n\nWill produce:\n\n    <p>This is <a href=\"http://example.com/\" title=\"Title\">\n    an example</a> inline link.</p>\n\n    <p><a href=\"http://example.net/\">This link</a> has no\n    title attribute.</p>\n\nIf you're referring to a local resource on the same server, you can\nuse relative paths:\n\n    See my [About](/about/) page for details.\n\nReference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:\n\n    This is [an example][id] reference-style link.\n\nYou can optionally use a space to separate the sets of brackets:\n\n    This is [an example] [id] reference-style link.\n\nThen, anywhere in the document, you define your link label like this,\non a line by itself:\n\n    [id]: http://example.com/  \"Optional Title Here\"\n\nThat is:\n\n*   Square brackets containing the link identifier (optionally\n    indented from the left margin using up to three spaces);\n*   followed by a colon;\n*   followed by one or more spaces (or tabs);\n*   followed by the URL for the link;\n*   optionally followed by a title attribute for the link, enclosed\n    in double or single quotes.\n\nThe link URL may, optionally, be surrounded by angle brackets:\n\n    [id]: <http://example.com/>  \"Optional Title Here\"\n\nYou can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:\n\n    [id]: http://example.com/longish/path/to/resource/here\n        \"Optional Title Here\"\n\nLink definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.\n\nLink definition names may constist of letters, numbers, spaces, and punctuation -- but they are *not* case sensitive. E.g. these two links:\n\n\t[link text][a]\n\t[link text][A]\n\nare equivalent.\n\nThe *implicit link name* shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n\"Google\" to the google.com web site, you could simply write:\n\n\t[Google][]\n\nAnd then define the link:\n\n\t[Google]: http://google.com/\n\nBecause link names may contain spaces, this shortcut even works for\nmultiple words in the link text:\n\n\tVisit [Daring Fireball][] for more information.\n\nAnd then define the link:\n\n\t[Daring Fireball]: http://daringfireball.net/\n\nLink definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they're\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.\n\nHere's an example of reference links in action:\n\n    I get 10 times more traffic from [Google] [1] than from\n    [Yahoo] [2] or [MSN] [3].\n\n      [1]: http://google.com/        \"Google\"\n      [2]: http://search.yahoo.com/  \"Yahoo Search\"\n      [3]: http://search.msn.com/    \"MSN Search\"\n\nUsing the implicit link name shortcut, you could instead write:\n\n    I get 10 times more traffic from [Google][] than from\n    [Yahoo][] or [MSN][].\n\n      [google]: http://google.com/        \"Google\"\n      [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n      [msn]:    http://search.msn.com/    \"MSN Search\"\n\nBoth of the above examples will produce the following HTML output:\n\n    <p>I get 10 times more traffic from <a href=\"http://google.com/\"\n    title=\"Google\">Google</a> than from\n    <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a>\n    or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p>\n\nFor comparison, here is the same paragraph written using\nMarkdown's inline link style:\n\n    I get 10 times more traffic from [Google](http://google.com/ \"Google\")\n    than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n    [MSN](http://search.msn.com/ \"MSN Search\").\n\nThe point of reference-style links is not that they're easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it's 176 characters; and as raw HTML,\nit's 234 characters. In the raw HTML, there's more markup than there\nis text.\n\nWith Markdown's reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.\n\n\n<h3 id=\"em\">Emphasis</h3>\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of\nemphasis. Text wrapped with one `*` or `_` will be wrapped with an\nHTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\n`<strong>` tag. E.g., this input:\n\n    *single asterisks*\n\n    _single underscores_\n\n    **double asterisks**\n\n    __double underscores__\n\nwill produce:\n\n    <em>single asterisks</em>\n\n    <em>single underscores</em>\n\n    <strong>double asterisks</strong>\n\n    <strong>double underscores</strong>\n\nYou can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.\n\nEmphasis can be used in the middle of a word:\n\n    un*fucking*believable\n\nBut if you surround an `*` or `_` with spaces, it'll be treated as a\nliteral asterisk or underscore.\n\nTo produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:\n\n    \\*this text is surrounded by literal asterisks\\*\n\n\n\n<h3 id=\"code\">Code</h3>\n\nTo indicate a span of code, wrap it with backtick quotes (`` ` ``).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:\n\n    Use the `printf()` function.\n\nwill produce:\n\n    <p>Use the <code>printf()</code> function.</p>\n\nTo include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:\n\n    ``There is a literal backtick (`) here.``\n\nwhich will produce this:\n\n    <p><code>There is a literal backtick (`) here.</code></p>\n\nThe backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:\n\n\tA single backtick in a code span: `` ` ``\n\n\tA backtick-delimited string in a code span: `` `foo` ``\n\nwill produce:\n\n\t<p>A single backtick in a code span: <code>`</code></p>\n\n\t<p>A backtick-delimited string in a code span: <code>`foo`</code></p>\n\nWith a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:\n\n    Please don't use any `<blink>` tags.\n\ninto:\n\n    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p>\n\nYou can write this:\n\n    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.\n\nto produce:\n\n    <p><code>&amp;#8212;</code> is the decimal-encoded\n    equivalent of <code>&amp;mdash;</code>.</p>\n\n\n\n<h3 id=\"img\">Images</h3>\n\nAdmittedly, it's fairly difficult to devise a \"natural\" syntax for\nplacing images into a plain text document format.\n\nMarkdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: *inline* and *reference*.\n\nInline image syntax looks like this:\n\n    ![Alt text](/path/to/img.jpg)\n\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n\nThat is:\n\n*   An exclamation mark: `!`;\n*   followed by a set of square brackets, containing the `alt`\n    attribute text for the image;\n*   followed by a set of parentheses, containing the URL or path to\n    the image, and an optional `title` attribute enclosed in double\n    or single quotes.\n\nReference-style image syntax looks like this:\n\n    ![Alt text][id]\n\nWhere \"id\" is the name of a defined image reference. Image references\nare defined using syntax identical to link references:\n\n    [id]: url/to/image  \"Optional title attribute\"\n\nAs of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML `<img>` tags.\n\n\n* * *\n\n\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\nMarkdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\n    <http://example.com/>\n\nMarkdown will turn this into:\n\n    <a href=\"http://example.com/\">http://example.com/</a>\n\nAutomatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:\n\n    <address@example.com>\n\ninto something like this:\n\n    <a href=\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;\n    &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;\n    &#109;\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;\n    &#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a>\n\nwhich will render in a browser as a clickable link to \"address@example.com\".\n\n(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won't fool all of\nthem. It's better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)\n\n\n\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\nMarkdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown's\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML `<em>` tag), you can backslashes\nbefore the asterisks, like this:\n\n    \\*literal asterisks\\*\n\nMarkdown provides backslash escapes for the following characters:\n\n    \\   backslash\n    `   backtick\n    *   asterisk\n    _   underscore\n    {}  curly braces\n    []  square brackets\n    ()  parentheses\n    #   hash mark\n\t+\tplus sign\n\t-\tminus sign (hyphen)\n    .   dot\n    !   exclamation mark\n",
    "expected": "<h1>Markdown: Syntax</h1>\n\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n<ul>\n<li><a href=\"#overview\">Overview</a>\n<ul>\n<li><a href=\"#philosophy\">Philosophy</a></li>\n<li><a href=\"#html\">Inline HTML</a></li>\n<li><a href=\"#autoescape\">Automatic Escaping for Special Characters</a></li>\n</ul></li>\n<li><a href=\"#block\">Block Elements</a>\n<ul>\n<li><a href=\"#p\">Paragraphs and Line Breaks</a></li>\n<li><a href=\"#header\">Headers</a></li>\n<li><a href=\"#blockquote\">Blockquotes</a></li>\n<li><a href=\"#list\">Lists</a></li>\n<li><a href=\"#precode\">Code Blocks</a></li>\n<li><a href=\"#hr\">Horizontal Rules</a></li>\n</ul></li>\n<li><a href=\"#span\">Span Elements</a>\n<ul>\n<li><a href=\"#link\">Links</a></li>\n<li><a href=\"#em\">Emphasis</a></li>\n<li><a href=\"#code\">Code</a></li>\n<li><a href=\"#img\">Images</a></li>\n</ul></li>\n<li><a href=\"#misc\">Miscellaneous</a>\n<ul>\n<li><a href=\"#backslash\">Backslash Escapes</a></li>\n<li><a href=\"#autolink\">Automatic Links</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/syntax.text\">see the source for it by adding '.text' to the URL</a>.</p>\n\n<hr />\n\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\n<p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p>\n\n<p>Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">Setext</a>, <a href=\"http://www.aaronsw.com/2002/atx/\">atx</a>, <a href=\"http://textism.com/tools/textile/\">Textile</a>, <a href=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a>,\n<a href=\"http://www.triptico.com/software/grutatxt.html\">Grutatext</a>, and <a href=\"http://ettext.taint.org/doc/\">EtText</a> -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.</p>\n\n<p>To this end, Markdown's syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like *emphasis*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you've ever\nused email.</p>\n\n<h3 id=\"html\">Inline HTML</h3>\n\n<p>Markdown's syntax is intended for one purpose: to be used as a\nformat for <em>writing</em> for the web.</p>\n\n<p>Markdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is <em>not</em> to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a <em>publishing</em> format; Markdown is a <em>writing</em>\nformat. Thus, Markdown's formatting syntax only addresses issues that\ncan be conveyed in plain text.</p>\n\n<p>For any markup that is not covered by Markdown's syntax, you simply\nuse HTML itself. There's no need to preface it or delimit it to\nindicate that you're switching from Markdown to HTML; you just use\nthe tags.</p>\n\n<p>The only restrictions are that block-level HTML elements -- e.g. <code>&lt;div&gt;</code>,\n<code>&lt;table&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;p&gt;</code>, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) <code>&lt;p&gt;</code> tags around HTML block-level tags.</p>\n\n<p>For example, to add an HTML table to a Markdown article:</p>\n\n<pre><code>This is a regular paragraph.\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n\nThis is another regular paragraph.\n</code></pre>\n\n<p>Note that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can't use Markdown-style <code>*emphasis*</code> inside an\nHTML block.</p>\n\n<p>Span-level HTML tags -- e.g. <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code>, or <code>&lt;del&gt;</code> -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou'd prefer to use HTML <code>&lt;a&gt;</code> or <code>&lt;img&gt;</code> tags instead of Markdown's\nlink or image syntax, go right ahead.</p>\n\n<p>Unlike block-level HTML tags, Markdown syntax <em>is</em> processed within\nspan-level tags.</p>\n\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\n<p>In HTML, there are two characters that demand special treatment: <code>&lt;</code>\nand <code>&amp;</code>. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. <code>&amp;lt;</code>, and\n<code>&amp;amp;</code>.</p>\n\n<p>Ampersands in particular are bedeviling for web writers. If you want to\nwrite about 'AT&amp;T', you need to write '<code>AT&amp;amp;T</code>'. You even need to\nescape ampersands within URLs. Thus, if you want to link to:</p>\n\n<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird\n</code></pre>\n\n<p>you need to encode the URL as:</p>\n\n<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird\n</code></pre>\n\n<p>in your anchor tag <code>href</code> attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.</p>\n\n<p>Markdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto <code>&amp;amp;</code>.</p>\n\n<p>So, if you want to include a copyright symbol in your article, you can write:</p>\n\n<pre><code>&amp;copy;\n</code></pre>\n\n<p>and Markdown will leave it alone. But if you write:</p>\n\n<pre><code>AT&amp;T\n</code></pre>\n\n<p>Markdown will translate it to:</p>\n\n<pre><code>AT&amp;amp;T\n</code></pre>\n\n<p>Similarly, because Markdown supports <a href=\"#html\">inline HTML</a>, if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:</p>\n\n<pre><code>4 &lt; 5\n</code></pre>\n\n<p>Markdown will translate it to:</p>\n\n<pre><code>4 &amp;lt; 5\n</code></pre>\n\n<p>However, inside Markdown code spans and blocks, angle brackets and\nampersands are <em>always</em> encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single <code>&lt;</code>\nand <code>&amp;</code> in your example code needs to be escaped.)</p>\n\n<hr />\n\n<h2 id=\"block\">Block Elements</h2>\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>The implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a <code>&lt;br /&gt;</code> tag.</p>\n\n<p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you\nend a line with two or more spaces, then type return.</p>\n\n<p>Yes, this takes a tad more effort to create a <code>&lt;br /&gt;</code>, but a simplistic\n\"every line break is a <code>&lt;br /&gt;</code>\" rule wouldn't work for Markdown.\nMarkdown's email-style <a href=\"#blockquote\">blockquoting</a> and multi-paragraph <a href=\"#list\">list items</a>\nwork best -- and look better -- when you format them with hard breaks.</p>\n\n<h3 id=\"header\">Headers</h3>\n\n<p>Markdown supports two styles of headers, <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">Setext</a> and <a href=\"http://www.aaronsw.com/2002/atx/\">atx</a>.</p>\n\n<p>Setext-style headers are \"underlined\" using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:</p>\n\n<pre><code>This is an H1\n=============\n\nThis is an H2\n-------------\n</code></pre>\n\n<p>Any number of underlining <code>=</code>'s or <code>-</code>'s will work.</p>\n\n<p>Atx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:</p>\n\n<pre><code># This is an H1\n\n## This is an H2\n\n###### This is an H6\n</code></pre>\n\n<p>Optionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :</p>\n\n<pre><code># This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n</code></pre>\n\n<h3 id=\"blockquote\">Blockquotes</h3>\n\n<p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a <code>&gt;</code> before every line:</p>\n\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n&gt; \n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n&gt; id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first\nline of a hard-wrapped paragraph:</p>\n\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of <code>&gt;</code>:</p>\n\n<pre><code>&gt; This is the first level of quoting.\n&gt;\n&gt; &gt; This is nested blockquote.\n&gt;\n&gt; Back to the first level.\n</code></pre>\n\n<p>Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:</p>\n\n<pre><code>&gt; ## This is a header.\n&gt; \n&gt; 1.   This is the first list item.\n&gt; 2.   This is the second list item.\n&gt; \n&gt; Here's some example code:\n&gt; \n&gt;     return shell_exec(\"echo $input | $markdown_script\");\n</code></pre>\n\n<p>Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.</p>\n\n<h3 id=\"list\">Lists</h3>\n\n<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>\n\n<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:</p>\n\n<pre><code>*   Red\n*   Green\n*   Blue\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>+   Red\n+   Green\n+   Blue\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>-   Red\n-   Green\n-   Blue\n</code></pre>\n\n<p>Ordered lists use numbers followed by periods:</p>\n\n<pre><code>1.  Bird\n2.  McHale\n3.  Parish\n</code></pre>\n\n<p>It's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;McHale&lt;/li&gt;\n&lt;li&gt;Parish&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>\n\n<p>If you instead wrote the list in Markdown like this:</p>\n\n<pre><code>1.  Bird\n1.  McHale\n1.  Parish\n</code></pre>\n\n<p>or even:</p>\n\n<pre><code>3. Bird\n1. McHale\n8. Parish\n</code></pre>\n\n<p>you'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.</p>\n\n<p>If you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.</p>\n\n<p>List markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.</p>\n\n<p>To make lists look nice, you can wrap items with hanging indents:</p>\n\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>But if you want to be lazy, you don't have to:</p>\n\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>If list items are separated by blank lines, Markdown will wrap the\nitems in <code>&lt;p&gt;</code> tags in the HTML output. For example, this input:</p>\n\n<pre><code>*   Bird\n*   Magic\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;Magic&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But this:</p>\n\n<pre><code>*   Bird\n\n*   Magic\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:</p>\n\n<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n</code></pre>\n\n<p>It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:</p>\n\n<pre><code>*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You're\nonly required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.\n</code></pre>\n\n<p>To put a blockquote within a list item, the blockquote's <code>&gt;</code>\ndelimiters need to be indented:</p>\n\n<pre><code>*   A list item with a blockquote:\n\n    &gt; This is a blockquote\n    &gt; inside a list item.\n</code></pre>\n\n<p>To put a code block within a list item, the code block needs\nto be indented <em>twice</em> -- 8 spaces or two tabs:</p>\n\n<pre><code>*   A list item with a code block:\n\n        &lt;code goes here&gt;\n</code></pre>\n\n<p>It's worth noting that it's possible to trigger an ordered list by\naccident, by writing something like this:</p>\n\n<pre><code>1986. What a great season.\n</code></pre>\n\n<p>In other words, a <em>number-period-space</em> sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:</p>\n\n<pre><code>1986\\. What a great season.\n</code></pre>\n\n<h3 id=\"precode\">Code Blocks</h3>\n\n<p>Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p>\n\n<p>To produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:</p>\n\n<pre><code>This is a normal paragraph:\n\n    This is a code block.\n</code></pre>\n\n<p>Markdown will generate:</p>\n\n<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;This is a code block.\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>One level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:</p>\n\n<pre><code>Here is an example of AppleScript:\n\n    tell application \"Foo\"\n        beep\n    end tell\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;tell application \"Foo\"\n    beep\nend tell\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>A code block continues until it reaches a line that is not indented\n(or the end of the article).</p>\n\n<p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:</p>\n\n<pre><code>    &lt;div class=\"footer\"&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;\n</code></pre>\n\n<p>will turn into:</p>\n\n<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=\"footer\"&amp;gt;\n    &amp;amp;copy; 2004 Foo Corporation\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>\n\n<p>Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.</p>\n\n<h3 id=\"hr\">Horizontal Rules</h3>\n\n<p>You can produce a horizontal rule tag (<code>&lt;hr /&gt;</code>) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:</p>\n\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n_ _ _\n</code></pre>\n\n<hr />\n\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\n<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>\n\n<p>In both styles, the link text is delimited by [square brackets].</p>\n\n<p>To create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an <em>optional</em>\ntitle for the link, surrounded in quotes. For example:</p>\n\n<pre><code>This is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n</code></pre>\n\n<p>Will produce:</p>\n\n<pre><code>&lt;p&gt;This is &lt;a href=\"http://example.com/\" title=\"Title\"&gt;\nan example&lt;/a&gt; inline link.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://example.net/\"&gt;This link&lt;/a&gt; has no\ntitle attribute.&lt;/p&gt;\n</code></pre>\n\n<p>If you're referring to a local resource on the same server, you can\nuse relative paths:</p>\n\n<pre><code>See my [About](/about/) page for details.\n</code></pre>\n\n<p>Reference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:</p>\n\n<pre><code>This is [an example][id] reference-style link.\n</code></pre>\n\n<p>You can optionally use a space to separate the sets of brackets:</p>\n\n<pre><code>This is [an example] [id] reference-style link.\n</code></pre>\n\n<p>Then, anywhere in the document, you define your link label like this,\non a line by itself:</p>\n\n<pre><code>[id]: http://example.com/  \"Optional Title Here\"\n</code></pre>\n\n<p>That is:</p>\n\n<ul>\n<li>Square brackets containing the link identifier (optionally\nindented from the left margin using up to three spaces);</li>\n<li>followed by a colon;</li>\n<li>followed by one or more spaces (or tabs);</li>\n<li>followed by the URL for the link;</li>\n<li>optionally followed by a title attribute for the link, enclosed\nin double or single quotes.</li>\n</ul>\n\n<p>The link URL may, optionally, be surrounded by angle brackets:</p>\n\n<pre><code>[id]: &lt;http://example.com/&gt;  \"Optional Title Here\"\n</code></pre>\n\n<p>You can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:</p>\n\n<pre><code>[id]: http://example.com/longish/path/to/resource/here\n    \"Optional Title Here\"\n</code></pre>\n\n<p>Link definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.</p>\n\n<p>Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are <em>not</em> case sensitive. E.g. these two links:</p>\n\n<pre><code>[link text][a]\n[link text][A]\n</code></pre>\n\n<p>are equivalent.</p>\n\n<p>The <em>implicit link name</em> shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n\"Google\" to the google.com web site, you could simply write:</p>\n\n<pre><code>[Google][]\n</code></pre>\n\n<p>And then define the link:</p>\n\n<pre><code>[Google]: http://google.com/\n</code></pre>\n\n<p>Because link names may contain spaces, this shortcut even works for\nmultiple words in the link text:</p>\n\n<pre><code>Visit [Daring Fireball][] for more information.\n</code></pre>\n\n<p>And then define the link:</p>\n\n<pre><code>[Daring Fireball]: http://daringfireball.net/\n</code></pre>\n\n<p>Link definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they're\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.</p>\n\n<p>Here's an example of reference links in action:</p>\n\n<pre><code>I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Using the implicit link name shortcut, you could instead write:</p>\n\n<pre><code>I get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \"Google\"\n  [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"\n  [msn]:    http://search.msn.com/    \"MSN Search\"\n</code></pre>\n\n<p>Both of the above examples will produce the following HTML output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=\"http://google.com/\"\ntitle=\"Google\"&gt;Google&lt;/a&gt; than from\n&lt;a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\"&gt;Yahoo&lt;/a&gt;\nor &lt;a href=\"http://search.msn.com/\" title=\"MSN Search\"&gt;MSN&lt;/a&gt;.&lt;/p&gt;\n</code></pre>\n\n<p>For comparison, here is the same paragraph written using\nMarkdown's inline link style:</p>\n\n<pre><code>I get 10 times more traffic from [Google](http://google.com/ \"Google\")\nthan from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n[MSN](http://search.msn.com/ \"MSN Search\").\n</code></pre>\n\n<p>The point of reference-style links is not that they're easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it's 176 characters; and as raw HTML,\nit's 234 characters. In the raw HTML, there's more markup than there\nis text.</p>\n\n<p>With Markdown's reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.</p>\n\n<h3 id=\"em\">Emphasis</h3>\n\n<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of\nemphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an\nHTML <code>&lt;em&gt;</code> tag; double <code>*</code>'s or <code>_</code>'s will be wrapped with an HTML\n<code>&lt;strong&gt;</code> tag. E.g., this input:</p>\n\n<pre><code>*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;\n\n&lt;em&gt;single underscores&lt;/em&gt;\n\n&lt;strong&gt;double asterisks&lt;/strong&gt;\n\n&lt;strong&gt;double underscores&lt;/strong&gt;\n</code></pre>\n\n<p>You can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.</p>\n\n<p>Emphasis can be used in the middle of a word:</p>\n\n<pre><code>un*fucking*believable\n</code></pre>\n\n<p>But if you surround an <code>*</code> or <code>_</code> with spaces, it'll be treated as a\nliteral asterisk or underscore.</p>\n\n<p>To produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:</p>\n\n<pre><code>\\*this text is surrounded by literal asterisks\\*\n</code></pre>\n\n<h3 id=\"code\">Code</h3>\n\n<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:</p>\n\n<pre><code>Use the `printf()` function.\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;\n</code></pre>\n\n<p>To include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:</p>\n\n<pre><code>``There is a literal backtick (`) here.``\n</code></pre>\n\n<p>which will produce this:</p>\n\n<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n\n<p>The backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:</p>\n\n<pre><code>A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n</code></pre>\n\n<p>will produce:</p>\n\n<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;\n</code></pre>\n\n<p>With a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:</p>\n\n<pre><code>Please don't use any `&lt;blink&gt;` tags.\n</code></pre>\n\n<p>into:</p>\n\n<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n</code></pre>\n\n<p>You can write this:</p>\n\n<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.\n</code></pre>\n\n<p>to produce:</p>\n\n<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded\nequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;\n</code></pre>\n\n<h3 id=\"img\">Images</h3>\n\n<p>Admittedly, it's fairly difficult to devise a \"natural\" syntax for\nplacing images into a plain text document format.</p>\n\n<p>Markdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>\n\n<p>Inline image syntax looks like this:</p>\n\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n</code></pre>\n\n<p>That is:</p>\n\n<ul>\n<li>An exclamation mark: <code>!</code>;</li>\n<li>followed by a set of square brackets, containing the <code>alt</code>\nattribute text for the image;</li>\n<li>followed by a set of parentheses, containing the URL or path to\nthe image, and an optional <code>title</code> attribute enclosed in double\nor single quotes.</li>\n</ul>\n\n<p>Reference-style image syntax looks like this:</p>\n\n<pre><code>![Alt text][id]\n</code></pre>\n\n<p>Where \"id\" is the name of a defined image reference. Image references\nare defined using syntax identical to link references:</p>\n\n<pre><code>[id]: url/to/image  \"Optional title attribute\"\n</code></pre>\n\n<p>As of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML <code>&lt;img&gt;</code> tags.</p>\n\n<hr />\n\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\n<p>Markdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>\n\n<pre><code>&lt;http://example.com/&gt;\n</code></pre>\n\n<p>Markdown will turn this into:</p>\n\n<pre><code>&lt;a href=\"http://example.com/\"&gt;http://example.com/&lt;/a&gt;\n</code></pre>\n\n<p>Automatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:</p>\n\n<pre><code>&lt;address@example.com&gt;\n</code></pre>\n\n<p>into something like this:</p>\n\n<pre><code>&lt;a href=\"&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;\n&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;\n&amp;#109;\"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;\n&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;\n</code></pre>\n\n<p>which will render in a browser as a clickable link to \"address@example.com\".</p>\n\n<p>(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won't fool all of\nthem. It's better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)</p>\n\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\n<p>Markdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown's\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can backslashes\nbefore the asterisks, like this:</p>\n\n<pre><code>\\*literal asterisks\\*\n</code></pre>\n\n<p>Markdown provides backslash escapes for the following characters:</p>\n\n<pre><code>\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark\n</code></pre>\n",
    "actual": "<h1>Markdown: Syntax</h1>\n<ul id=\"ProjectSubmenu\">\n    <li><a href=\"/projects/markdown/\" title=\"Markdown Project Page\">Main</a></li>\n    <li><a href=\"/projects/markdown/basics\" title=\"Markdown Basics\">Basics</a></li>\n    <li><a class=\"selected\" title=\"Markdown Syntax Documentation\">Syntax</a></li>\n    <li><a href=\"/projects/markdown/license\" title=\"Pricing and License Information\">License</a></li>\n    <li><a href=\"/projects/markdown/dingus\" title=\"Online Markdown Web Form\">Dingus</a></li>\n</ul>\n\n\n<ul>\n<li><a href=\"#overview\">Overview</a><ul>\n<li><a href=\"#philosophy\">Philosophy</a></li>\n<li><a href=\"#html\">Inline HTML</a></li>\n<li><a href=\"#autoescape\">Automatic Escaping for Special Characters</a></li>\n</ul>\n</li>\n<li><a href=\"#block\">Block Elements</a><ul>\n<li><a href=\"#p\">Paragraphs and Line Breaks</a></li>\n<li><a href=\"#header\">Headers</a></li>\n<li><a href=\"#blockquote\">Blockquotes</a></li>\n<li><a href=\"#list\">Lists</a></li>\n<li><a href=\"#precode\">Code Blocks</a></li>\n<li><a href=\"#hr\">Horizontal Rules</a></li>\n</ul>\n</li>\n<li><a href=\"#span\">Span Elements</a><ul>\n<li><a href=\"#link\">Links</a></li>\n<li><a href=\"#em\">Emphasis</a></li>\n<li><a href=\"#code\">Code</a></li>\n<li><a href=\"#img\">Images</a></li>\n</ul>\n</li>\n<li><a href=\"#misc\">Miscellaneous</a><ul>\n<li><a href=\"#backslash\">Backslash Escapes</a></li>\n<li><a href=\"#autolink\">Automatic Links</a></li>\n</ul>\n</li>\n</ul>\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href=\"/projects/markdown/syntax.text\">see the source for it by adding &#39;.text&#39; to the URL</a>.</p>\n<hr>\n<h2 id=\"overview\">Overview</h2>\n\n<h3 id=\"philosophy\">Philosophy</h3>\n\n<p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p>\n<p>Readability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it&#39;s been marked up with tags or formatting instructions. While\nMarkdown&#39;s syntax has been influenced by several existing text-to-HTML\nfilters -- including [Setext] <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">1</a>, [atx] <a href=\"http://www.aaronsw.com/2002/atx/\">2</a>, [Textile] <a href=\"http://textism.com/tools/textile/\">3</a>, [reStructuredText] <a href=\"http://docutils.sourceforge.net/rst.html\">4</a>,\n[Grutatext] <a href=\"http://www.triptico.com/software/grutatxt.html\">5</a>, and [EtText] <a href=\"http://ettext.taint.org/doc/\">6</a> -- the single biggest source of\ninspiration for Markdown&#39;s syntax is the format of plain text email.</p>\n<p>To this end, Markdown&#39;s syntax is comprised entirely of punctuation\ncharacters, which punctuation characters have been carefully chosen so\nas to look like what they mean. E.g., asterisks around a word actually\nlook like *emphasis*. Markdown lists look like, well, lists. Even\nblockquotes look like quoted passages of text, assuming you&#39;ve ever\nused email.</p>\n<h3 id=\"html\">Inline HTML</h3>\n\n<p>Markdown&#39;s syntax is intended for one purpose: to be used as a\nformat for <em>writing</em> for the web.</p>\n<p>Markdown is not a replacement for HTML, or even close to it. Its\nsyntax is very small, corresponding only to a very small subset of\nHTML tags. The idea is <em>not</em> to create a syntax that makes it easier\nto insert HTML tags. In my opinion, HTML tags are already easy to\ninsert. The idea for Markdown is to make it easy to read, write, and\nedit prose. HTML is a <em>publishing</em> format; Markdown is a <em>writing</em>\nformat. Thus, Markdown&#39;s formatting syntax only addresses issues that\ncan be conveyed in plain text.</p>\n<p>For any markup that is not covered by Markdown&#39;s syntax, you simply\nuse HTML itself. There&#39;s no need to preface it or delimit it to\nindicate that you&#39;re switching from Markdown to HTML; you just use\nthe tags.</p>\n<p>The only restrictions are that block-level HTML elements -- e.g. <code>&lt;div&gt;</code>,\n<code>&lt;table&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;p&gt;</code>, etc. -- must be separated from surrounding\ncontent by blank lines, and the start and end tags of the block should\nnot be indented with tabs or spaces. Markdown is smart enough not\nto add extra (unwanted) <code>&lt;p&gt;</code> tags around HTML block-level tags.</p>\n<p>For example, to add an HTML table to a Markdown article:</p>\n<pre><code>This is a regular paragraph.\n\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n\nThis is another regular paragraph.</code></pre>\n<p>Note that Markdown formatting syntax is not processed within block-level\nHTML tags. E.g., you can&#39;t use Markdown-style <code>*emphasis*</code> inside an\nHTML block.</p>\n<p>Span-level HTML tags -- e.g. <code>&lt;span&gt;</code>, <code>&lt;cite&gt;</code>, or <code>&lt;del&gt;</code> -- can be\nused anywhere in a Markdown paragraph, list item, or header. If you\nwant, you can even use HTML tags instead of Markdown formatting; e.g. if\nyou&#39;d prefer to use HTML <code>&lt;a&gt;</code> or <code>&lt;img&gt;</code> tags instead of Markdown&#39;s\nlink or image syntax, go right ahead.</p>\n<p>Unlike block-level HTML tags, Markdown syntax <em>is</em> processed within\nspan-level tags.</p>\n<h3 id=\"autoescape\">Automatic Escaping for Special Characters</h3>\n\n<p>In HTML, there are two characters that demand special treatment: <code>&lt;</code>\nand <code>&amp;</code>. Left angle brackets are used to start tags; ampersands are\nused to denote HTML entities. If you want to use them as literal\ncharacters, you must escape them as entities, e.g. <code>&amp;lt;</code>, and\n<code>&amp;amp;</code>.</p>\n<p>Ampersands in particular are bedeviling for web writers. If you want to\nwrite about &#39;AT&amp;T&#39;, you need to write &#39;<code>AT&amp;amp;T</code>&#39;. You even need to\nescape ampersands within URLs. Thus, if you want to link to:</p>\n<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre>\n<p>you need to encode the URL as:</p>\n<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre>\n<p>in your anchor tag <code>href</code> attribute. Needless to say, this is easy to\nforget, and is probably the single most common source of HTML validation\nerrors in otherwise well-marked-up web sites.</p>\n<p>Markdown allows you to use these characters naturally, taking care of\nall the necessary escaping for you. If you use an ampersand as part of\nan HTML entity, it remains unchanged; otherwise it will be translated\ninto <code>&amp;amp;</code>.</p>\n<p>So, if you want to include a copyright symbol in your article, you can write:</p>\n<pre><code>&amp;copy;</code></pre>\n<p>and Markdown will leave it alone. But if you write:</p>\n<pre><code>AT&amp;T</code></pre>\n<p>Markdown will translate it to:</p>\n<pre><code>AT&amp;amp;T</code></pre>\n<p>Similarly, because Markdown supports <a href=\"#html\">inline HTML</a>, if you use\nangle brackets as delimiters for HTML tags, Markdown will treat them as\nsuch. But if you write:</p>\n<pre><code>4 &lt; 5</code></pre>\n<p>Markdown will translate it to:</p>\n<pre><code>4 &amp;lt; 5</code></pre>\n<p>However, inside Markdown code spans and blocks, angle brackets and\nampersands are <em>always</em> encoded automatically. This makes it easy to use\nMarkdown to write about HTML code. (As opposed to raw HTML, which is a\nterrible format for writing about HTML syntax, because every single <code>&lt;</code>\nand <code>&amp;</code> in your example code needs to be escaped.)</p>\n<hr>\n<h2 id=\"block\">Block Elements</h2>\n\n\n<h3 id=\"p\">Paragraphs and Line Breaks</h3>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n<p>The implication of the &quot;one or more consecutive lines of text&quot; rule is\nthat Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType&#39;s &quot;Convert Line Breaks&quot; option) which translate every line break\ncharacter in a paragraph into a <code>&lt;br /&gt;</code> tag.</p>\n<p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you\nend a line with two or more spaces, then type return.</p>\n<p>Yes, this takes a tad more effort to create a <code>&lt;br /&gt;</code>, but a simplistic\n&quot;every line break is a <code>&lt;br /&gt;</code>&quot; rule wouldn&#39;t work for Markdown.\nMarkdown&#39;s email-style <a href=\"#blockquote\">blockquoting</a> and multi-paragraph <a href=\"#list\">list items</a>\nwork best -- and look better -- when you format them with hard breaks.</p>\n<h3 id=\"header\">Headers</h3>\n\n<p>Markdown supports two styles of headers, [Setext] <a href=\"http://docutils.sourceforge.net/mirror/setext.html\">1</a> and [atx] <a href=\"http://www.aaronsw.com/2002/atx/\">2</a>.</p>\n<p>Setext-style headers are &quot;underlined&quot; using equal signs (for first-level\nheaders) and dashes (for second-level headers). For example:</p>\n<pre><code>This is an H1\n=============\n\nThis is an H2\n-------------</code></pre>\n<p>Any number of underlining <code>=</code>&#39;s or <code>-</code>&#39;s will work.</p>\n<p>Atx-style headers use 1-6 hash characters at the start of the line,\ncorresponding to header levels 1-6. For example:</p>\n<pre><code># This is an H1\n\n## This is an H2\n\n###### This is an H6</code></pre>\n<p>Optionally, you may &quot;close&quot; atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don&#39;t even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.) :</p>\n<pre><code># This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######</code></pre>\n<h3 id=\"blockquote\">Blockquotes</h3>\n\n<p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you&#39;re\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a <code>&gt;</code> before every line:</p>\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n&gt;\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n&gt; id sem consectetuer libero luctus adipiscing.</code></pre>\n<p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first\nline of a hard-wrapped paragraph:</p>\n<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.</code></pre>\n<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of <code>&gt;</code>:</p>\n<pre><code>&gt; This is the first level of quoting.\n&gt;\n&gt; &gt; This is nested blockquote.\n&gt;\n&gt; Back to the first level.</code></pre>\n<p>Blockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:</p>\n<pre><code>&gt; ## This is a header.\n&gt;\n&gt; 1.   This is the first list item.\n&gt; 2.   This is the second list item.\n&gt;\n&gt; Here&#39;s some example code:\n&gt;\n&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre>\n<p>Any decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.</p>\n<h3 id=\"list\">Lists</h3>\n\n<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>\n<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:</p>\n<pre><code>*   Red\n*   Green\n*   Blue</code></pre>\n<p>is equivalent to:</p>\n<pre><code>+   Red\n+   Green\n+   Blue</code></pre>\n<p>and:</p>\n<pre><code>-   Red\n-   Green\n-   Blue</code></pre>\n<p>Ordered lists use numbers followed by periods:</p>\n<pre><code>1.  Bird\n2.  McHale\n3.  Parish</code></pre>\n<p>It&#39;s important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:</p>\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;McHale&lt;/li&gt;\n&lt;li&gt;Parish&lt;/li&gt;\n&lt;/ol&gt;</code></pre>\n<p>If you instead wrote the list in Markdown like this:</p>\n<pre><code>1.  Bird\n1.  McHale\n1.  Parish</code></pre>\n<p>or even:</p>\n<pre><code>3. Bird\n1. McHale\n8. Parish</code></pre>\n<p>you&#39;d get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don&#39;t have to.</p>\n<p>If you do use lazy list numbering, however, you should still start the\nlist with the number 1. At some point in the future, Markdown may support\nstarting ordered lists at an arbitrary number.</p>\n<p>List markers typically start at the left margin, but may be indented by\nup to three spaces. List markers must be followed by one or more spaces\nor a tab.</p>\n<p>To make lists look nice, you can wrap items with hanging indents:</p>\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>\n<p>But if you want to be lazy, you don&#39;t have to:</p>\n<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.</code></pre>\n<p>If list items are separated by blank lines, Markdown will wrap the\nitems in <code>&lt;p&gt;</code> tags in the HTML output. For example, this input:</p>\n<pre><code>*   Bird\n*   Magic</code></pre>\n<p>will turn into:</p>\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Bird&lt;/li&gt;\n&lt;li&gt;Magic&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>But this:</p>\n<pre><code>*   Bird\n\n*   Magic</code></pre>\n<p>will turn into:</p>\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n<p>List items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be intended by either 4 spaces\nor one tab:</p>\n<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>\n<p>It looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:</p>\n<pre><code>*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You&#39;re\nonly required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.</code></pre>\n<p>To put a blockquote within a list item, the blockquote&#39;s <code>&gt;</code>\ndelimiters need to be indented:</p>\n<pre><code>*   A list item with a blockquote:\n\n    &gt; This is a blockquote\n    &gt; inside a list item.</code></pre>\n<p>To put a code block within a list item, the code block needs\nto be indented <em>twice</em> -- 8 spaces or two tabs:</p>\n<pre><code>*   A list item with a code block:\n\n        &lt;code goes here&gt;</code></pre>\n<p>It&#39;s worth noting that it&#39;s possible to trigger an ordered list by\naccident, by writing something like this:</p>\n<pre><code>1986. What a great season.</code></pre>\n<p>In other words, a <em>number-period-space</em> sequence at the beginning of a\nline. To avoid this, you can backslash-escape the period:</p>\n<pre><code>1986\\. What a great season.</code></pre>\n<h3 id=\"precode\">Code Blocks</h3>\n\n<p>Pre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p>\n<p>To produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab. For example, given this input:</p>\n<pre><code>This is a normal paragraph:\n\n    This is a code block.</code></pre>\n<p>Markdown will generate:</p>\n<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;This is a code block.\n&lt;/code&gt;&lt;/pre&gt;</code></pre>\n<p>One level of indentation -- 4 spaces or 1 tab -- is removed from each\nline of the code block. For example, this:</p>\n<pre><code>Here is an example of AppleScript:\n\n    tell application &quot;Foo&quot;\n        beep\n    end tell</code></pre>\n<p>will turn into:</p>\n<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;\n    beep\nend tell\n&lt;/code&gt;&lt;/pre&gt;</code></pre>\n<p>A code block continues until it reaches a line that is not indented\n(or the end of the article).</p>\n<p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:</p>\n<pre><code>    &lt;div class=&quot;footer&quot;&gt;\n        &amp;copy; 2004 Foo Corporation\n    &lt;/div&gt;</code></pre>\n<p>will turn into:</p>\n<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;\n    &amp;amp;copy; 2004 Foo Corporation\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;</code></pre>\n<p>Regular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit&#39;s also easy to use Markdown to write about Markdown&#39;s own syntax.</p>\n<h3 id=\"hr\">Horizontal Rules</h3>\n\n<p>You can produce a horizontal rule tag (<code>&lt;hr /&gt;</code>) by placing three or\nmore hyphens, asterisks, or underscores on a line by themselves. If you\nwish, you may use spaces between the hyphens or asterisks. Each of the\nfollowing lines will produce a horizontal rule:</p>\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n_ _ _</code></pre>\n<hr>\n<h2 id=\"span\">Span Elements</h2>\n\n<h3 id=\"link\">Links</h3>\n\n<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>\n<p>In both styles, the link text is delimited by [square brackets].</p>\n<p>To create an inline link, use a set of regular parentheses immediately\nafter the link text&#39;s closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an <em>optional</em>\ntitle for the link, surrounded in quotes. For example:</p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.</code></pre>\n<p>Will produce:</p>\n<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;\nan example&lt;/a&gt; inline link.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no\ntitle attribute.&lt;/p&gt;</code></pre>\n<p>If you&#39;re referring to a local resource on the same server, you can\nuse relative paths:</p>\n<pre><code>See my [About](/about/) page for details.</code></pre>\n<p>Reference-style links use a second set of square brackets, inside\nwhich you place a label of your choosing to identify the link:</p>\n<pre><code>This is [an example][id] reference-style link.</code></pre>\n<p>You can optionally use a space to separate the sets of brackets:</p>\n<pre><code>This is [an example] [id] reference-style link.</code></pre>\n<p>Then, anywhere in the document, you define your link label like this,\non a line by itself:</p>\n<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre>\n<p>That is:</p>\n<ul>\n<li>Square brackets containing the link identifier (optionally\nindented from the left margin using up to three spaces);</li>\n<li>followed by a colon;</li>\n<li>followed by one or more spaces (or tabs);</li>\n<li>followed by the URL for the link;</li>\n<li>optionally followed by a title attribute for the link, enclosed\nin double or single quotes.</li>\n</ul>\n<p>The link URL may, optionally, be surrounded by angle brackets:</p>\n<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre>\n<p>You can put the title attribute on the next line and use extra spaces\nor tabs for padding, which tends to look better with longer URLs:</p>\n<pre><code>[id]: http://example.com/longish/path/to/resource/here\n    &quot;Optional Title Here&quot;</code></pre>\n<p>Link definitions are only used for creating links during Markdown\nprocessing, and are stripped from your document in the HTML output.</p>\n<p>Link definition names may constist of letters, numbers, spaces, and punctuation -- but they are <em>not</em> case sensitive. E.g. these two links:</p>\n<pre><code>[link text][a]\n[link text][A]</code></pre>\n<p>are equivalent.</p>\n<p>The <em>implicit link name</em> shortcut allows you to omit the name of the\nlink, in which case the link text itself is used as the name.\nJust use an empty set of square brackets -- e.g., to link the word\n&quot;Google&quot; to the google.com web site, you could simply write:</p>\n<pre><code>[Google][]</code></pre>\n<p>And then define the link:</p>\n<pre><code>[Google]: http://google.com/</code></pre>\n<p>Because link names may contain spaces, this shortcut even works for\nmultiple words in the link text:</p>\n<pre><code>Visit [Daring Fireball][] for more information.</code></pre>\n<p>And then define the link:</p>\n<pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre>\n<p>Link definitions can be placed anywhere in your Markdown document. I\ntend to put them immediately after each paragraph in which they&#39;re\nused, but if you want, you can put them all at the end of your\ndocument, sort of like footnotes.</p>\n<p>Here&#39;s an example of reference links in action:</p>\n<pre><code>I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        &quot;Google&quot;\n  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;\n  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre>\n<p>Using the implicit link name shortcut, you could instead write:</p>\n<pre><code>I get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        &quot;Google&quot;\n  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;\n  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre>\n<p>Both of the above examples will produce the following HTML output:</p>\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;\ntitle=&quot;Google&quot;&gt;Google&lt;/a&gt; than from\n&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;\nor &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre>\n<p>For comparison, here is the same paragraph written using\nMarkdown&#39;s inline link style:</p>\n<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)\nthan from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or\n[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre>\n<p>The point of reference-style links is not that they&#39;re easier to\nwrite. The point is that with reference-style links, your document\nsource is vastly more readable. Compare the above examples: using\nreference-style links, the paragraph itself is only 81 characters\nlong; with inline-style links, it&#39;s 176 characters; and as raw HTML,\nit&#39;s 234 characters. In the raw HTML, there&#39;s more markup than there\nis text.</p>\n<p>With Markdown&#39;s reference-style links, a source document much more\nclosely resembles the final output, as rendered in a browser. By\nallowing you to move the markup-related metadata out of the paragraph,\nyou can add links without interrupting the narrative flow of your\nprose.</p>\n<h3 id=\"em\">Emphasis</h3>\n\n<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of\nemphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an\nHTML <code>&lt;em&gt;</code> tag; double <code>*</code>&#39;s or <code>_</code>&#39;s will be wrapped with an HTML\n<code>&lt;strong&gt;</code> tag. E.g., this input:</p>\n<pre><code>*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__</code></pre>\n<p>will produce:</p>\n<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;\n\n&lt;em&gt;single underscores&lt;/em&gt;\n\n&lt;strong&gt;double asterisks&lt;/strong&gt;\n\n&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre>\n<p>You can use whichever style you prefer; the lone restriction is that\nthe same character must be used to open and close an emphasis span.</p>\n<p>Emphasis can be used in the middle of a word:</p>\n<pre><code>un*fucking*believable</code></pre>\n<p>But if you surround an <code>*</code> or <code>_</code> with spaces, it&#39;ll be treated as a\nliteral asterisk or underscore.</p>\n<p>To produce a literal asterisk or underscore at a position where it\nwould otherwise be used as an emphasis delimiter, you can backslash\nescape it:</p>\n<pre><code>\\*this text is surrounded by literal asterisks\\*</code></pre>\n<h3 id=\"code\">Code</h3>\n\n<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:</p>\n<pre><code>Use the `printf()` function.</code></pre>\n<p>will produce:</p>\n<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre>\n<p>To include a literal backtick character within a code span, you can use\nmultiple backticks as the opening and closing delimiters:</p>\n<pre><code>``There is a literal backtick (`) here.``</code></pre>\n<p>which will produce this:</p>\n<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre>\n<p>The backtick delimiters surrounding a code span may include spaces --\none after the opening, one before the closing. This allows you to place\nliteral backtick characters at the beginning or end of a code span:</p>\n<pre><code>A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``</code></pre>\n<p>will produce:</p>\n<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre>\n<p>With a code span, ampersands and angle brackets are encoded as HTML\nentities automatically, which makes it easy to include example HTML\ntags. Markdown will turn this:</p>\n<pre><code>Please don&#39;t use any `&lt;blink&gt;` tags.</code></pre>\n<p>into:</p>\n<pre><code>&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre>\n<p>You can write this:</p>\n<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre>\n<p>to produce:</p>\n<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded\nequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre>\n<h3 id=\"img\">Images</h3>\n\n<p>Admittedly, it&#39;s fairly difficult to devise a &quot;natural&quot; syntax for\nplacing images into a plain text document format.</p>\n<p>Markdown uses an image syntax that is intended to resemble the syntax\nfor links, allowing for two styles: <em>inline</em> and <em>reference</em>.</p>\n<p>Inline image syntax looks like this:</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre>\n<p>That is:</p>\n<ul>\n<li>An exclamation mark: <code>!</code>;</li>\n<li>followed by a set of square brackets, containing the <code>alt</code>\nattribute text for the image;</li>\n<li>followed by a set of parentheses, containing the URL or path to\nthe image, and an optional <code>title</code> attribute enclosed in double\nor single quotes.</li>\n</ul>\n<p>Reference-style image syntax looks like this:</p>\n<pre><code>![Alt text][id]</code></pre>\n<p>Where &quot;id&quot; is the name of a defined image reference. Image references\nare defined using syntax identical to link references:</p>\n<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre>\n<p>As of this writing, Markdown has no syntax for specifying the\ndimensions of an image; if this is important to you, you can simply\nuse regular HTML <code>&lt;img&gt;</code> tags.</p>\n<hr>\n<h2 id=\"misc\">Miscellaneous</h2>\n\n<h3 id=\"autolink\">Automatic Links</h3>\n\n<p>Markdown supports a shortcut style for creating &quot;automatic&quot; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>\n<pre><code>&lt;http://example.com/&gt;</code></pre>\n<p>Markdown will turn this into:</p>\n<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre>\n<p>Automatic links for email addresses work similarly, except that\nMarkdown will also perform a bit of randomized decimal and hex\nentity-encoding to help obscure your address from address-harvesting\nspambots. For example, Markdown will turn this:</p>\n<pre><code>&lt;address@example.com&gt;</code></pre>\n<p>into something like this:</p>\n<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;\n&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;\n&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;\n&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre>\n<p>which will render in a browser as a clickable link to &quot;<a href=\"mailto:&#97;&#x64;&#100;&#x72;&#x65;&#115;&#115;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#109;\">&#97;&#x64;&#100;&#x72;&#x65;&#115;&#115;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#109;</a>&quot;.</p>\n<p>(This sort of entity-encoding trick will indeed fool many, if not\nmost, address-harvesting bots, but it definitely won&#39;t fool all of\nthem. It&#39;s better than nothing, but an address published in this way\nwill probably eventually start receiving spam.)</p>\n<h3 id=\"backslash\">Backslash Escapes</h3>\n\n<p>Markdown allows you to use backslash escapes to generate literal\ncharacters which would otherwise have special meaning in Markdown&#39;s\nformatting syntax. For example, if you wanted to surround a word with\nliteral asterisks (instead of an HTML <code>&lt;em&gt;</code> tag), you can backslashes\nbefore the asterisks, like this:</p>\n<pre><code>\\*literal asterisks\\*</code></pre>\n<p>Markdown provides backslash escapes for the following characters:</p>\n<pre><code>\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+    plus sign\n-    minus sign (hyphen)\n.   dot\n!   exclamation mark</code></pre>\n"
  }
]